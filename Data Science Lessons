Jupyter Notebook
Upgrade
Last Checkpoint: 08/02/2019
(autosaved)
Current Kernel Logo
Python 3 
File
Edit
View
Insert
Cell
Kernel
Help

print("hello world! again!")
print("hello world! again!")
hello world! again!
This is an attempt to start again. Actually from where I stopped.
$ ipython
  File "<ipython-input-1-a6b1889512eb>", line 1
    $ ipython
    ^
SyntaxError: invalid syntax


import numpy as np
from numpy.random import randn
data = {i: np.random.randn() for i in np.arange(7)}
data
{0: -1.0060558847840557,
 1: 1.4144457021625318,
 2: 0.2367088150745824,
 3: -0.1656833047773101,
 4: -0.3405880958234126,
 5: 0.7309474243277531,
 6: 0.1581613064564593}
data[1]
1.4144457021625318
a = ["this", "is", "a", "new", "one"]
a?
a[0] = "was"
a
['was', 'is', 'a', 'new', 'one']
def add_numbers(a, b):
    """ add two numbers together"""
    """ this is to ensure that the sum matches the other codes"""
    return a + b
c = add_numbers(3, 4)
c
7
%pwd
'C:\\Users\\user\\Desktop\\Data Science'
%magic
%matplotlib inline
import matplotlib.pyplot as plt
plt.plot(np.random.randn(50).cumsum())
[<matplotlib.lines.Line2D at 0x628c730>]

tup = 1, 2, 3, 4
tup
(1, 2, 3, 4)
tup[2]
3
second_tup = tup
second_tup
(1, 2, 3, 4)
a_list = ["Nigeria", "Senegal", "Algeria", "Tunisia"]
a_list
['Nigeria', 'Senegal', 'Algeria', 'Tunisia']
a_list.append("Egypt")
a_list
['Nigeria', 'Senegal', 'Algeria', 'Tunisia', 'Egypt']
b_list = ("Africa", "Europe", "Asia", "North America")
list(b_list)
['Africa', 'Europe', 'Asia', 'North America']
gen = range(11)
gen
range(0, 11)
list(gen)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
tuple(gen)
(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
a_list.insert(3, "Morocco")
a_list
['Nigeria', 'Senegal', 'Algeria', 'Morocco', 'Tunisia', 'Egypt']
a_list.insert(-1, "Ghana")
a_list
['Nigeria', 'Senegal', 'Algeria', 'Morocco', 'Tunisia', 'Ghana', 'Egypt']
list(b_list)
['Africa', 'Europe', 'Asia', 'North America']
use = list(b_list)
use.insert(2, "South America")
use
['Africa', 'Europe', 'South America', 'Asia', 'North America']
a_list + use
['Nigeria',
 'Senegal',
 'Algeria',
 'Morocco',
 'Tunisia',
 'Ghana',
 'Egypt',
 'Africa',
 'Europe',
 'South America',
 'Asia',
 'North America']
joined = a_list + use
joined
['Nigeria',
 'Senegal',
 'Algeria',
 'Morocco',
 'Tunisia',
 'Ghana',
 'Egypt',
 'Africa',
 'Europe',
 'South America',
 'Asia',
 'North America']
love = ["this", "is", "just"] + ["the", "beginning", "for"]
love
['this', 'is', 'just', 'the', 'beginning', 'for']
new = a_list.extend(use)
new
use
['Africa', 'Europe', 'South America', 'Asia', 'North America']
a = ["one", "two", "three"]
a.extend(["four", "five"])
a
['one', 'two', 'three', 'four', 'five']
a_list
['Nigeria',
 'Senegal',
 'Algeria',
 'Morocco',
 'Tunisia',
 'Ghana',
 'Egypt',
 'Africa',
 'Europe',
 'South America',
 'Asia',
 'North America',
 'Africa',
 'Europe',
 'South America',
 'Asia',
 'North America']
del a_list
use
['Africa', 'Europe', 'South America', 'Asia', 'North America']
a
['one', 'two', 'three', 'four', 'five']
a.extend(use)
a
['one',
 'two',
 'three',
 'four',
 'five',
 'Africa',
 'Europe',
 'South America',
 'Asia',
 'North America']
use
['Africa', 'Europe', 'South America', 'Asia', 'North America']
use.extend(a)
use
['Africa',
 'Europe',
 'South America',
 'Asia',
 'North America',
 'one',
 'two',
 'three',
 'four',
 'five',
 'Africa',
 'Europe',
 'South America',
 'Asia',
 'North America']
scar = []
for even in list(range(22)):
    if even % 3 == 0:
        scar.append(even)
scar
[0, 3, 6, 9, 12, 15, 18, 21]
sane = list(range(10))
sane
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
see = []
for even in sane:
    if even % 2 == 0:
        see.append(even)
        
see
[0, 2, 4, 6, 8]
list_of_list = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16, 17, 18]]
​
every = []
for chunk in list_of_list:
    if len(chunk) > 5:
        print(chunk)
[13, 14, 15, 16, 17, 18]
some = ["yes", "bar", "school", "glasses"]
for i in enumerate(some):
    print(i)
(0, 'yes')
(1, 'bar')
(2, 'school')
(3, 'glasses')
for elements in some:
    print(elements)
yes
bar
school
glasses
mapping = {}
for i, v in enumerate(some):
    mapping[v] = i
i
3
v
'glasses'
mapping
{'yes': 0, 'bar': 1, 'school': 2, 'glasses': 3}
i
3
mapping["yes"]
0
some
['bar', 'glasses', 'school', 'yes']
sorted(some)
['bar', 'glasses', 'school', 'yes']
sorted(["abestos", "aark", "yes"])
['aark', 'abestos', 'yes']
sorted(["this is just the beginning"])
['this is just the beginning']
sorted(["amazing"])
['amazing']
sorted("amazing")
['a', 'a', 'g', 'i', 'm', 'n', 'z']
sorted("12345112")
['1', '1', '1', '2', '2', '3', '4', '5']
some
['bar', 'glasses', 'school', 'yes']
num = [1, 2, 3, 4]
for elements in zip(some, num):
    print(elements)
('bar', 1)
('glasses', 2)
('school', 3)
('yes', 4)
country = ["Nigeria", "Ghana", "Algeria", "Tunisia"]
for figures in zip(num, some, country):
    print(figures)
(1, 'bar', 'Nigeria')
(2, 'glasses', 'Ghana')
(3, 'school', 'Algeria')
(4, 'yes', 'Tunisia')
zipped = zip(some, country)
zipped
<zip at 0x4f8ce90>
print(zipped)
<zip object at 0x04F8CE90>
list(zipped)
[('bar', 'Nigeria'),
 ('glasses', 'Ghana'),
 ('school', 'Algeria'),
 ('yes', 'Tunisia')]
tuple(zipped)
()
list(zip(num, country))
[(1, 'Nigeria'), (2, 'Ghana'), (3, 'Algeria'), (4, 'Tunisia')]
from collections import defaultdict
​
words = ["apple", "bar", "ball", "almond", "butterfly"]
import sys 
well = sys.getdefaultencoding()
well
'utf-8'
with open("well.txt", "r") as path:
    lines = [x for x in path]
lines
['i want to see this as it is saved!']
with open("yob2010.txt", "r") as path:
    line = [x.rstrip() for x in path]
rake = pd.read_csv("yob2010.txt")
rake.head()
rake
path
<_io.TextIOWrapper name='yob2010.txt' mode='r' encoding='cp1252'>
lines
['i want to see this as it is saved!']
​
with open("well.txt", "r") as reward:
    well = reward.read(10)
well
'i want to '
with open("yob2010.txt", "r") as data:
   # how = data.tell()
    had = data.read(10)
    how = data.tell()
had
'Isabella,F'
how
10
import numpy as np
data = np.array([3, 4, 5])
data
array([3, 4, 5])
np.array([[3, 4, 5], [6, 7, 8]])
array([[3, 4, 5],
       [6, 7, 8]])
use = np.array(np.arange(15).reshape((3, 5)))
use
array([[ 0,  1,  2,  3,  4],
       [ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14]])
use.ndim
2
use.shape
(3, 5)
use.dtype
dtype('int32')
data.dtype
dtype('int32')
select = np.random.randn(3, 5)
select
array([[-0.082564  , -0.99737032, -0.86320188, -1.14284114, -0.98863213],
       [ 1.35077479, -1.05943426,  1.34637411, -1.24649444,  0.21308423],
       [ 0.66648574, -1.32186757, -0.73175045, -0.26531167, -0.27270103]])
select * 10
array([[ -0.82563995,  -9.97370316,  -8.63201876, -11.4284114 ,
         -9.88632132],
       [ 13.50774785, -10.59434261,  13.4637411 , -12.46494437,
          2.13084227],
       [  6.66485739, -13.2186757 ,  -7.31750445,  -2.65311674,
         -2.72701027]])
select + select
array([[-0.16512799, -1.99474063, -1.72640375, -2.28568228, -1.97726426],
       [ 2.70154957, -2.11886852,  2.69274822, -2.49298887,  0.42616845],
       [ 1.33297148, -2.64373514, -1.46350089, -0.53062335, -0.54540205]])
select * 2
array([[-0.16512799, -1.99474063, -1.72640375, -2.28568228, -1.97726426],
       [ 2.70154957, -2.11886852,  2.69274822, -2.49298887,  0.42616845],
       [ 1.33297148, -2.64373514, -1.46350089, -0.53062335, -0.54540205]])
earth = np.eye(9)
earth
array([[1., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 1., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 1., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 1., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 1., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 1., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 1., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 1., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 1.]])
np.eye(4)
array([[1., 0., 0., 0.],
       [0., 1., 0., 0.],
       [0., 0., 1., 0.],
       [0., 0., 0., 1.]])
np.eye(2)
array([[1., 0.],
       [0., 1.]])
np.eye(3)
array([[1., 0., 0.],
       [0., 1., 0.],
       [0., 0., 1.]])
np.identity(3)
array([[1., 0., 0.],
       [0., 1., 0.],
       [0., 0., 1.]])
np.ones(10)
array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
data
array([3, 4, 5])
np.ones_like(9)
array(1)
np.zeros(5)
array([0., 0., 0., 0., 0.])
np.zeros_like(10)
array(0)
num = [1, 2, 3, 4]
np.ones_like(num)
array([1, 1, 1, 1])
data
array([3, 4, 5])
np.ones_like(data)
array([1, 1, 1])
say = np.array([[3, 4, 9], [10, 12, 17]], dtype=np.float64)
say
array([[ 3.,  4.,  9.],
       [10., 12., 17.]])
say.dtype
dtype('float64')
save = np.array(np.random.randn(2, 4), dtype=np.float64)
save
array([[ 1.18511082, -0.42099757,  0.84331111,  2.30678504],
       [-0.43094707,  0.74605342, -0.05229186,  0.17241308]])
rave = np.array(np.random.randn(3, 5), dtype=np.int32)
rave
array([[ 0, -1, -2,  1,  0],
       [ 0,  0,  0, -1, -1],
       [ 0, -2, -1,  1,  0]])
rave * 2
array([[ 0, -2, -4,  2,  0],
       [ 0,  0,  0, -2, -2],
       [ 0, -4, -2,  2,  0]])
rave ** 2
array([[0, 1, 4, 1, 0],
       [0, 0, 0, 1, 1],
       [0, 4, 1, 1, 0]], dtype=int32)
np.ones_like(rave)
array([[1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1]])
rave
array([[ 0, -1, -2,  1,  0],
       [ 0,  0,  0, -1, -1],
       [ 0, -2, -1,  1,  0]])
rave.min
<function ndarray.min>
rave.min()
-2
rave.max()
1
used = [2, 4, 6, 8, 10]
ano = [1.2, 2.5, 9.9, 8.10, 19.20]
arr =  np.array(used)
arr
array([ 2,  4,  6,  8, 10])
arr.dtype
dtype('int32')
change = arr.astype(np.float64)
change
array([ 2.,  4.,  6.,  8., 10.])
dave = np.array(ano)
dave
array([ 1.2,  2.5,  9.9,  8.1, 19.2])
flex = dave.astype(np.int64)
flex
array([ 1,  2,  9,  8, 19], dtype=int64)
dave.astype(np.int32)
array([ 1,  2,  9,  8, 19])
stri = ["1.23", "3.5", "7.6", "10.1"]
sorry = np.array(stri, dtype=np.string_)
sorry
array([b'1.23', b'3.5', b'7.6', b'10.1'], dtype='|S4')
check = sorry.astype(np.float64)
check
array([ 1.23,  3.5 ,  7.6 , 10.1 ])
flex
array([ 1,  2,  9,  8, 19], dtype=int64)
flex.astype(str)
array(['1', '2', '9', '8', '19'], dtype='<U21')
hall = np.array(["2.3", "4.5", "9.1", "7.6"], dtype=np.string_)
hall
array([b'2.3', b'4.5', b'9.1', b'7.6'], dtype='|S3')
hall.astype(float)
array([2.3, 4.5, 9.1, 7.6])
hall.astype(np.float)
array([2.3, 4.5, 9.1, 7.6])
shake = hall.astype(np.float64)
shake
array([2.3, 4.5, 9.1, 7.6])
shake.astype(int)
array([2, 4, 9, 7])
shake.astype(str)
array(['2.3', '4.5', '9.1', '7.6'], dtype='<U32')
shake.astype(np.string_)
array([b'2.3', b'4.5', b'9.1', b'7.6'], dtype='|S32')
check_ndimension = np.arange(10)
check_ndimension.ndim
1
check_ndimension
array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
import numpy as np
names = ["Bob", "Joe", "Will", "Bob", "Will", "Joe", "Joe"]
data = np.random.randn(7, 4)
names
['Bob', 'Joe', 'Will', 'Bob', 'Joe', 'Joe']
data
array([[ 0.14454048,  0.68525067, -1.65495093,  1.56092855],
       [-0.72529802, -0.10237457,  1.27862542, -0.02633199],
       [-0.59271468, -2.06459151,  0.19702236, -1.56746251],
       [ 1.3891891 , -0.0712763 , -0.04155291,  2.31023428],
       [ 0.42824728, -1.96848716, -0.61736496, -2.90016395],
       [-0.67369271, -0.45845856,  0.22458428, -0.60564737],
       [-1.22658229, -0.56085984,  0.46605809, -0.32119139]])
names == "Bob"
False
names == "Will"
False
names == "Joe"
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-33-8355f200b485> in <module>
----> 1 names == "Joe"

NameError: name 'names' is not defined

arr = np.empty((8, 4))
for i in range(8):
f    arr[i] = i
arr
array([[0., 0., 0., 0.],
       [1., 1., 1., 1.],
       [2., 2., 2., 2.],
       [3., 3., 3., 3.],
       [4., 4., 4., 4.],
       [5., 5., 5., 5.],
       [6., 6., 6., 6.],
       [7., 7., 7., 7.]])
i
7
arr[[7, 3, 2]]
array([[7., 7., 7., 7.],
       [3., 3., 3., 3.],
       [2., 2., 2., 2.]])
arr[[-1, -3, -5, -7]]
array([[7., 7., 7., 7.],
       [5., 5., 5., 5.],
       [3., 3., 3., 3.],
       [1., 1., 1., 1.]])
import numpy as np
arr1 = np.arange(12)
arr1
array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])
arr2 = np.arange(12).reshape((4, 3))
arr2
array([[ 0,  1,  2],
       [ 3,  4,  5],
       [ 6,  7,  8],
       [ 9, 10, 11]])
arr3 = np.arange(32).reshape(8, 4)
arr3[[0, 1, 2, 3], [3, 2, 1, 0]]
array([ 3,  6,  9, 12])
arr3
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11],
       [12, 13, 14, 15],
       [16, 17, 18, 19],
       [20, 21, 22, 23],
       [24, 25, 26, 27],
       [28, 29, 30, 31]])
arr = np.arange(16).reshape((2, 2, 2, 2))
arr
array([[[[ 0,  1],
         [ 2,  3]],

        [[ 4,  5],
         [ 6,  7]]],


       [[[ 8,  9],
         [10, 11]],

        [[12, 13],
         [14, 15]]]])
arr[1]
array([[[ 8,  9],
        [10, 11]],

       [[12, 13],
        [14, 15]]])
arr.T
array([[[[ 0,  8],
         [ 4, 12]],

        [[ 2, 10],
         [ 6, 14]]],


       [[[ 1,  9],
         [ 5, 13]],

        [[ 3, 11],
         [ 7, 15]]]])
arr[[1][0]]
array([[[ 8,  9],
        [10, 11]],

       [[12, 13],
        [14, 15]]])
arr
array([[[[ 0,  1],
         [ 2,  3]],

        [[ 4,  5],
         [ 6,  7]]],


       [[[ 8,  9],
         [10, 11]],

        [[12, 13],
         [14, 15]]]])
arr.ndim
4
x = np.random.randn(4)
y = np.random.randn(4)
x
array([ 1.3476643 , -0.28515888,  0.6120055 , -0.18993074])
y
array([-0.27488759,  0.52722886, -1.46924068, -1.13348908])
add = np.add(x, y)
add
array([ 1.07277671,  0.24206997, -0.85723518, -1.32341982])
big = np.maximum(x, y)
big
array([ 1.3476643 ,  0.52722886,  0.6120055 , -0.18993074])
np.array((4, 4))
look = np.arange(16).reshape((4, 4))
look
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11],
       [12, 13, 14, 15]])
look.ndim
2
look.ndim
2
three = np.arange(8).reshape(2, 2, 2)
three
array([[[0, 1],
        [2, 3]],

       [[4, 5],
        [6, 7]]])
three.ndim
3
three[0]
array([[0, 1],
       [2, 3]])
three[1]
array([[4, 5],
       [6, 7]])
three
array([[[0, 1],
        [2, 3]],

       [[4, 5],
        [6, 7]]])
three[three < 3] = 100
three
array([[[100, 100],
        [100,   3]],

       [[  4,   5],
        [  6,   7]]])
three.sum()
325
points = np.arange(-5, 5, 0.01)
xs, ys = np.meshgrid(points, points)
ys
array([[-5.  , -5.  , -5.  , ..., -5.  , -5.  , -5.  ],
       [-4.99, -4.99, -4.99, ..., -4.99, -4.99, -4.99],
       [-4.98, -4.98, -4.98, ..., -4.98, -4.98, -4.98],
       ...,
       [ 4.97,  4.97,  4.97, ...,  4.97,  4.97,  4.97],
       [ 4.98,  4.98,  4.98, ...,  4.98,  4.98,  4.98],
       [ 4.99,  4.99,  4.99, ...,  4.99,  4.99,  4.99]])
xs
array([[-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],
       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],
       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],
       ...,
       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],
       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],
       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99]])
z = np.sqrt(xs ** 2 + ys ** 2)
z
array([[7.07106781, 7.06400028, 7.05693985, ..., 7.04988652, 7.05693985,
        7.06400028],
       [7.06400028, 7.05692568, 7.04985815, ..., 7.04279774, 7.04985815,
        7.05692568],
       [7.05693985, 7.04985815, 7.04278354, ..., 7.03571603, 7.04278354,
        7.04985815],
       ...,
       [7.04988652, 7.04279774, 7.03571603, ..., 7.0286414 , 7.03571603,
        7.04279774],
       [7.05693985, 7.04985815, 7.04278354, ..., 7.03571603, 7.04278354,
        7.04985815],
       [7.06400028, 7.05692568, 7.04985815, ..., 7.04279774, 7.04985815,
        7.05692568]])
import matplotlib.pyplot as plt
plt.imshow(z, cmap=plt.cm.Accent)
plt.colorbar()
plt.title("Image plot of $\sqrt{x^2 + y^2}$ for a range of value")
Text(0.5, 1.0, 'Image plot of $\\sqrt{x^2 + y^2}$ for a range of value')

a = [1.1, 1.2, 2.3, 2.5, 3]
b = [4.1, 4.2, 5.3, 5.5, 6]
cond = [True, False, True, True, False]
pick = [x if c else y for x, y, c in zip(a, b, cond)]
pick
[1.1, 4.2, 2.3, 2.5, 6]
east = np.where(cond, a, b)
east
array([1.1, 4.2, 2.3, 2.5, 6. ])
arr = np.random.randn(4, 4)
arr
array([[-1.39928001, -0.11494778,  0.65113257, -0.77597909],
       [-0.65142417,  0.09624559,  1.93285287,  0.85970555],
       [ 0.40363358, -0.12639488, -0.12766546, -0.08568844],
       [ 0.23787255, -1.22072406,  0.01155862, -1.42873125]])
arr > 0
array([[False, False,  True, False],
       [False,  True,  True,  True],
       [ True, False, False, False],
       [ True, False,  True, False]])
np.where(arr > 0, 2, -200)
array([[-200, -200,    2, -200],
       [-200,    2,    2,    2],
       [   2, -200, -200, -200],
       [   2, -200,    2, -200]])
arr
array([[-1.39928001, -0.11494778,  0.65113257, -0.77597909],
       [-0.65142417,  0.09624559,  1.93285287,  0.85970555],
       [ 0.40363358, -0.12639488, -0.12766546, -0.08568844],
       [ 0.23787255, -1.22072406,  0.01155862, -1.42873125]])
check = np.where(arr > 0, 10, -20)
check
array([[-20, -20,  10, -20],
       [-20,  10,  10,  10],
       [ 10, -20, -20, -20],
       [ 10, -20,  10, -20]])
check.sum()
-110
arr = np.random.randn(6)
arr
array([-0.89169609, -0.98980625, -0.06053983, -0.78391143, -0.53805227,
       -1.44580612])
arr.sort()
arr
array([-1.44580612, -0.98980625, -0.89169609, -0.78391143, -0.53805227,
       -0.06053983])
arr2 = np.random.randn(5, 3)
arr2
array([[-1.77825653,  0.77272702, -0.63469031],
       [-0.19863373,  0.31085907, -0.03536167],
       [ 1.38557729, -1.36660551, -1.26818747],
       [-0.70402676, -0.86144776,  0.54594405],
       [-0.77611416, -1.47693074, -0.86893886]])
arr2.sort()
arr2
array([[-1.77825653, -0.63469031,  0.77272702],
       [-0.19863373, -0.03536167,  0.31085907],
       [-1.36660551, -1.26818747,  1.38557729],
       [-0.86144776, -0.70402676,  0.54594405],
       [-1.47693074, -0.86893886, -0.77611416]])
arr2.sort(0)
arr2
array([[-1.77825653, -1.26818747, -0.77611416],
       [-1.47693074, -0.86893886,  0.31085907],
       [-1.36660551, -0.70402676,  0.54594405],
       [-0.86144776, -0.63469031,  0.77272702],
       [-0.19863373, -0.03536167,  1.38557729]])
large_arr = np.random.randn(1000)
large_arr.sort()
how = large_arr[int(0.05 * len(large_arr))]
how
-1.6998413838657374
a = np.array([1, 3, 4, 6, 2, 5])
b = np.array([1, 2, 3, 4, 5, 6])
a[int(0.05 * len(a))]
1
b[int(0.05 * len(b))]
1
srt = np.random.rand(9).reshape((3, 3))
srt
array([[0.8898447 , 0.97445354, 0.10186161],
       [0.86829848, 0.63569909, 0.08422745],
       [0.71777276, 0.08966067, 0.27470635]])
scattered = srt[[2, 1, 0]]
scattered
array([[0.71777276, 0.08966067, 0.27470635],
       [0.86829848, 0.63569909, 0.08422745],
       [0.8898447 , 0.97445354, 0.10186161]])
srt
array([[0.10186161, 0.8898447 , 0.97445354],
       [0.08422745, 0.63569909, 0.86829848],
       [0.08966067, 0.27470635, 0.71777276]])
srt[int(0.05 * len(srt))]
array([0.10186161, 0.8898447 , 0.97445354])
raw = np.random.randn(10)
raw
array([-2.36187816, -0.47331237, -1.36206579, -0.70393042,  0.78275316,
       -0.20750028, -0.12365731,  0.06528563,  1.11436698, -0.95780195])
temp = raw
non_raw = temp
raw
array([-2.36187816, -0.47331237, -1.36206579, -0.70393042,  0.78275316,
       -0.20750028, -0.12365731,  0.06528563,  1.11436698, -0.95780195])
non_raw
array([-2.36187816, -0.47331237, -1.36206579, -0.70393042,  0.78275316,
       -0.20750028, -0.12365731,  0.06528563,  1.11436698, -0.95780195])
raw.sort()
raw
array([-2.36187816, -1.36206579, -0.95780195, -0.70393042, -0.47331237,
       -0.20750028, -0.12365731,  0.06528563,  0.78275316,  1.11436698])
non_raw
array([-2.36187816, -1.36206579, -0.95780195, -0.70393042, -0.47331237,
       -0.20750028, -0.12365731,  0.06528563,  0.78275316,  1.11436698])
temp
array([-2.36187816, -1.36206579, -0.95780195, -0.70393042, -0.47331237,
       -0.20750028, -0.12365731,  0.06528563,  0.78275316,  1.11436698])
new = copy(raw)
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-196-13f389eb0434> in <module>
----> 1 new = copy(raw)

NameError: name 'copy' is not defined

new = raw.copy()
new
array([-2.36187816, -1.36206579, -0.95780195, -0.70393042, -0.47331237,
       -0.20750028, -0.12365731,  0.06528563,  0.78275316,  1.11436698])
raw
array([-2.36187816, -1.36206579, -0.95780195, -0.70393042, -0.47331237,
       -0.20750028, -0.12365731,  0.06528563,  0.78275316,  1.11436698])
raw.sort()
raw
array([-2.36187816, -1.36206579, -0.95780195, -0.70393042, -0.47331237,
       -0.20750028, -0.12365731,  0.06528563,  0.78275316,  1.11436698])
ano = np.random.randn(8)
ano
array([-1.48676591,  1.68925496,  0.91373545,  0.56325267, -1.16913067,
        1.11466101,  1.19079583, -1.07843072])
look = ano.copy()
look 
array([-1.48676591,  1.68925496,  0.91373545,  0.56325267, -1.16913067,
        1.11466101,  1.19079583, -1.07843072])
ano.sort()
ano
array([-1.48676591, -1.16913067, -1.07843072,  0.56325267,  0.91373545,
        1.11466101,  1.19079583,  1.68925496])
look
array([-1.48676591,  1.68925496,  0.91373545,  0.56325267, -1.16913067,
        1.11466101,  1.19079583, -1.07843072])
ano[int(0.05 * len(ano))]
-1.4867659073052868
look[int(0.05 * len(look))]
-1.4867659073052868
stare = np.random.rand(3, 3)
stare
array([[0.47056502, 0.92596901, 0.63817058],
       [0.27043214, 0.24556734, 0.41370536],
       [0.20244243, 0.15843487, 0.12561982]])
close = stare.copy()
close
array([[0.47056502, 0.92596901, 0.63817058],
       [0.27043214, 0.24556734, 0.41370536],
       [0.20244243, 0.15843487, 0.12561982]])
stare.sort()
stare
array([[0.47056502, 0.63817058, 0.92596901],
       [0.24556734, 0.27043214, 0.41370536],
       [0.12561982, 0.15843487, 0.20244243]])
close
array([[0.47056502, 0.92596901, 0.63817058],
       [0.27043214, 0.24556734, 0.41370536],
       [0.20244243, 0.15843487, 0.12561982]])
use = np.where(stare < 0.4, 10, stare)
use
array([[ 0.47056502,  0.63817058,  0.92596901],
       [10.        , 10.        ,  0.41370536],
       [10.        , 10.        , 10.        ]])
close
array([[0.47056502, 0.92596901, 0.63817058],
       [0.27043214, 0.24556734, 0.41370536],
       [0.20244243, 0.15843487, 0.12561982]])
import numpy as np
import matplotlib.pyplot as plt
x = np.arange(-5, 5, 0.01)
a, b = np.meshgrid(x, x)
a
array([[-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],
       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],
       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],
       ...,
       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],
       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],
       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99]])
z = np.sqrt(a ** 2 + b ** 2)
plt.imshow(z)
plt.colorbar()
<matplotlib.colorbar.Colorbar at 0x4512ed0>

c = np.sqrt(a ** 2 + b ** 2)
plt.imshow(c, cmap=plt.cm.gray)
plt.colorbar(); plt.title("This is the $\sqrt{a ^ 2 + b ^ 2}$ for a given point")
Text(0.5, 1.0, 'This is the $\\sqrt{a ^ 2 + b ^ 2}$ for a given point')

x = np.array([[1, 2, 3], [4, 5, 6]])
y = np.array([[6, 23], [-1, 7], [8, 9]])
mul = x.dot(y)
mul
array([[ 28,  64],
       [ 67, 181]])
ano_mul = y.dot(x)
ano_mul
array([[ 98, 127, 156],
       [ 27,  33,  39],
       [ 44,  61,  78]])
x, y
(array([[1, 2, 3],
        [4, 5, 6]]), array([[ 6, 23],
        [-1,  7],
        [ 8,  9]]))
x
array([[1, 2, 3],
       [4, 5, 6]])
y
array([[ 6, 23],
       [-1,  7],
       [ 8,  9]])
x.dot(y)
array([[ 28,  64],
       [ 67, 181]])
x
array([[1, 2, 3],
       [4, 5, 6]])
y
array([[ 6, 23],
       [-1,  7],
       [ 8,  9]])
c = np.array([[2, 3], [1, 5]])
det(c)
7.000000000000001
c.T
array([[2, 1],
       [3, 5]])
inv(c)
array([[ 0.71428571, -0.42857143],
       [-0.14285714,  0.28571429]])
trace(c)
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-77-7da73b4f9de9> in <module>
----> 1 trace(c)

NameError: name 'trace' is not defined

det(c)
7.000000000000001
import pandas as pd
from pandas import Series, DataFrame
​
easy = pd.Series([1, 2, 9, 10])
easy
0     1
1     2
2     9
3    10
dtype: int64
easy.values
array([ 1,  2,  9, 10], dtype=int64)
easy.index
RangeIndex(start=0, stop=4, step=1)
ano_easy = pd.Series([2, 4, 6, 8], index=[["one", "Two", "Three", "Four"]])
ano_easy
one      2
Two      4
Three    6
Four     8
dtype: int64
import numpy as np
numpan = pd.Series(np.arange(0, 10, 2), index=list("abcde"))
numpan
a    0
b    2
c    4
d    6
e    8
dtype: int32
numpan["d"]
6
look = np.array([[1, 2, 3], [4, 5, 6]])
look 
array([[1, 2, 3],
       [4, 5, 6]])
look[0]
array([1, 2, 3])
look[0, 1]
2
numpan
a    0
b    2
c    4
d    6
e    8
dtype: int32
numpan[numpan > 3]
c    4
d    6
e    8
dtype: int32
numpan * 2
a     0
b     4
c     8
d    12
e    16
dtype: int32
numpan ["e"]
8
look
​
array([[1, 2, 3],
       [4, 5, 6]])
np.where(look > 2, 5, 10)
array([[10, 10,  5],
       [ 5,  5,  5]])
numpan
a    0
b    2
c    4
d    6
e    8
dtype: int32
np.where(numpan > 3, 10, 20)
array([20, 20, 10, 10, 10])
np.where(numpan > 4, )
np.where(numpan > 4, 10, numpan)
array([ 0,  2,  4, 10, 10])
sdict = {"name": "Arsenal",
         "country": "England",
         "league": "Premier League",
         "Position": 1}
sdict
{'name': 'Arsenal',
 'country': 'England',
 'league': 'Premier League',
 'Position': 1}
convert_to_series = pd.Series(sdict)
convert_to_series
name               Arsenal
country            England
league      Premier League
Position                 1
dtype: object
convert_to_series[["name", "Position"]]
name        Arsenal
Position          1
dtype: object
change = ["club", "country", "league", "Position"]
ano_conversion = pd.Series(sdict, index=change)
ano_conversion
club                   NaN
country            England
league      Premier League
Position                 1
dtype: object
ano_conversion.isnull()
club         True
country     False
league      False
Position    False
dtype: bool
ano_conversion.notnull()
club        False
country      True
league       True
Position     True
dtype: bool
convert_to_series + ano_conversion
Position                               2
club                                 NaN
country                   EnglandEngland
league      Premier LeaguePremier League
name                                 NaN
dtype: object
obj = pd.Series([1, 2, 3, 4])
obj
0    1
1    2
2    3
3    4
dtype: int64
obj.name = "Testing"
obj
0    1
1    2
2    3
3    4
Name: Testing, dtype: int64
obj.name
'Testing'
obj.index.name = "Figures"
obj
Figures
0    1
1    2
2    3
3    4
Name: Testing, dtype: int64
obj.index.name = ["un", "deux", "troi", "four"]
obj
[un, deux, troi, four]
0    1
1    2
2    3
3    4
Name: Testing, dtype: int64
obj2 = pd.Series([2, 4, 6, 8])
obj
[un, deux, troi, four]
0    1
1    2
2    3
3    4
Name: Testing, dtype: int64
obj2
0    2
1    4
2    6
3    8
dtype: int64
use = ["un", "deux", "troi", "four"]
obj2.index.name =" use"
obj2
 use
0    2
1    4
2    6
3    8
dtype: int64
obj2.index = use
obj
[un, deux, troi, four]
0    1
1    2
2    3
3    4
Name: Testing, dtype: int64
obj2
un      2
deux    4
troi    6
four    8
dtype: int64
obj.index = use
obj
un      1
deux    2
troi    3
four    4
Name: Testing, dtype: int64
sdict
{'name': 'Arsenal',
 'country': 'England',
 'league': 'Premier League',
 'Position': 1}
pd.DataFrame(sdict, index=["one", "two", "three", "four"])
name	country	league	Position
one	Arsenal	England	Premier League	1
two	Arsenal	England	Premier League	1
three	Arsenal	England	Premier League	1
four	Arsenal	England	Premier League	1
better = {"name": ["arsenal", "chelsea", "liverpool"],
         "country": ["England", "Spain", "France"],
         "league": ["Premier league", "La liga", "Ligue One"],
         "position": [1, 20, 25]}
clear = pd.DataFrame(better, index=["First", "Second", "third"])
clear.name = "Clubs in England"
clear
name	country	league	position
First	Clubs in England	England	Premier league	1
Second	Clubs in England	Spain	La liga	20
third	Clubs in England	France	Ligue One	25
clear.country
First     England
Second      Spain
third      France
Name: country, dtype: object
clear["name"]
First     Clubs in England
Second    Clubs in England
third     Clubs in England
Name: name, dtype: object
clear[["name", "league"]]
name	league
First	Clubs in England	Premier league
Second	Clubs in England	La liga
third	Clubs in England	Ligue One
clear
name	country	league	position
First	Clubs in England	England	Premier league	1
Second	Clubs in England	Spain	La liga	20
third	Clubs in England	France	Ligue One	25
clear.loc["Second"]
name        Clubs in England
country                Spain
league               La liga
position                  20
Name: Second, dtype: object
import pandas as pd
import numpy as np
from pandas import Series, DataFrame
clubs = pd.DataFrame({"Country": ["England", "Spain", "Italy", "France"],
            "clubs": ["Arsenal", "Madrid", "Juventus", "Monaco"],
            "Position": [1, 4, 8, 9],
            "Valuation": ["First", "Fouth", "Fifth", "Tenth"]})
clubs
Country	clubs	Position	Valuation
0	England	Arsenal	1	First
1	Spain	Madrid	4	Fouth
2	Italy	Juventus	8	Fifth
3	France	Monaco	9	Tenth
clubs.loc[3]
Country      France
clubs        Monaco
Position          9
Valuation     Tenth
Name: 3, dtype: object
clubs["Country"]
0    England
1      Spain
2      Italy
3     France
Name: Country, dtype: object
rate = pd.DataFrame(np.arange(8).reshape((4, 2)), index=list("abcd"), columns=["Green", "Yellow"])
rate
Green	Yellow
a	0	1
b	2	3
c	4	5
d	6	7
epl = pd.DataFrame([["Arsenal", "Chelsea", "Liverpool"], ["England", "Spain", "Italy"], 
             ["Premier League", "La Liga", "Ligue One"]], index=["Clubs", "Country", "League"],
            columns=["First", "Second", "Third"])
epl
First	Second	Third
Clubs	Arsenal	Chelsea	Liverpool
Country	England	Spain	Italy
League	Premier League	La Liga	Ligue One
epl.loc["Country"]
First     England
Second      Spain
Third       Italy
Name: Country, dtype: object
serial = pd.Series([4.5, 5.9, 9.8, 6.7], index=list("abcd"))
serial
a    4.5
b    5.9
c    9.8
d    6.7
dtype: float64
ano_index = list("abcde")
obj = serial.reindex(ano_index)
obj
a    4.5
b    5.9
c    9.8
d    6.7
e    NaN
dtype: float64
obj2 = pd.Series(["Blue", "Purple", "Green"], index=[0, 2, 4])
obj2
0      Blue
2    Purple
4     Green
dtype: object
obj2.reindex(range(6)).ffill()
0      Blue
1      Blue
2    Purple
3    Purple
4     Green
5     Green
dtype: object
frame = pd.DataFrame(np.arange(9).reshape((3, 3)), index=["a", "c", "d"],
                    columns=["Ohio", "Texas", "California"])
frame
Ohio	Texas	California
a	0	1	2
c	3	4	5
d	6	7	8
frame2 = frame.reindex(["a", "b", "c", "d"])
frame2
Ohio	Texas	California
a	0.0	1.0	2.0
b	NaN	NaN	NaN
c	3.0	4.0	5.0
d	6.0	7.0	8.0
frame2.dropna()
Ohio	Texas	California
a	0.0	1.0	2.0
c	3.0	4.0	5.0
d	6.0	7.0	8.0
frame2["postal code"] = np.arange(2, 10, 2)
frame2
Ohio	Texas	California	postal code
a	0.0	1.0	2.0	2
b	NaN	NaN	NaN	4
c	3.0	4.0	5.0	6
d	6.0	7.0	8.0	8
frame2.dropna(1)
postal code
a	2
b	4
c	6
d	8
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from pandas import Series, DataFrame
frame = {"Nevada": {"League": True, "Airport": False},
        "California": {"League": False, "Federal Jail": True}}
frame
{'Nevada': {'League': True, 'Airport': False},
 'California': {'League': False, 'Federal Jail': True}}
frame2 = pd.DataFrame(frame)
frame2
Nevada	California
Airport	False	NaN
Federal Jail	NaN	True
League	True	False
dict1 = {"Country": "Nigeria",
        "Continent": "Africa",
        "Religion": "Christianity"}
dict2 = {"Country": "UK",
        "Continent": "Europe",
        "Religion": "Christianity"}
obj = [dict1, dict2]
obj
[{'Country': 'Nigeria', 'Continent': 'Africa', 'Religion': 'Christianity'},
 {'Country': 'UK', 'Continent': 'Europe', 'Religion': 'Christianity'}]
obj2 = pd.DataFrame(obj, index=["One", "Two"])
obj2
Continent	Country	Religion
One	Africa	Nigeria	Christianity
Two	Europe	UK	Christianity
obj3 = obj2.T
obj3
One	Two
Continent	Africa	Europe
Country	Nigeria	UK
Religion	Christianity	Christianity
obj3["One"]
Continent          Africa
Country           Nigeria
Religion     Christianity
Name: One, dtype: object
obj3.loc["Country"]
One    Nigeria
Two         UK
Name: Country, dtype: object
obj3
One	Two
Continent	Africa	Europe
Country	Nigeria	UK
Religion	Christianity	Christianity
obj3.values
array([['Africa', 'Europe'],
       ['Nigeria', 'UK'],
       ['Christianity', 'Christianity']], dtype=object)
obj3.index
Index(['Continent', 'Country', 'Religion'], dtype='object')
obj3.name = "Nationality"
obj3.columns.name = "Position"
obj3
Position	One	Two
Continent	Africa	Europe
Country	Nigeria	UK
Religion	Christianity	Christianity
obj3.index.name = "Demographics"
obj3
Position	One	Two
Demographics		
Continent	Africa	Europe
Country	Nigeria	UK
Religion	Christianity	Christianity
a = (1, 3, 4, 5)
b = (6, 7, 8, 9)
c = [a, b]
d = pd.DataFrame(c, index=["one", "two"], columns=["temp", "sale", "flyers", "rainfall"])
d
temp	sale	flyers	rainfall
one	1	3	4	5
two	6	7	8	9
ser = pd.Series(np.arange(3), index=["a", "b", "c"])
index = ser.index
index
Index(['a', 'b', 'c'], dtype='object')
index[1:]
Index(['b', 'c'], dtype='object')
labels = pd.Index(np.arange(3))
labels
Int64Index([0, 1, 2], dtype='int64')
obj2 = pd.Series([1.3, -4.6, 7.8], index=labels)
obj2
0    1.3
1   -4.6
2    7.8
dtype: float64
obj2.index is labels
True
arr = pd.Series([1.4, -3.8, 2.6, 7.4], index=["d", "c", "a", "b"])
arr
d    1.4
c   -3.8
a    2.6
b    7.4
dtype: float64
re_index = ["a", "b", "c", "d"]
arr.reindex(re_index)
a    2.6
b    7.4
c   -3.8
d    1.4
dtype: float64
arr1 = pd.Series(["blue", "purple", "orange"], index=[0, 2, 4])
new_arr1 = arr1.reindex(np.arange(6)).ffill()
new_arr1
0      blue
1      blue
2    purple
3    purple
4    orange
5    orange
dtype: object
arr2 = pd.DataFrame(np.arange(9).reshape((3, 3)), index=["a", "c", "b"],
                    columns=["Ohio", "Texas", "California"])
arr2
Ohio	Texas	California
a	0	1	2
c	3	4	5
b	6	7	8
new_arr2 = arr2.reindex(["a", "b", "c"])
new_arr2
Ohio	Texas	California
a	0	1	2
b	6	7	8
c	3	4	5
ano_new_arr2 = arr2.reindex(columns=["Texas", "California", "Ohio"])
ano_new_arr2
Texas	California	Ohio
a	1	2	0
c	4	5	3
b	7	8	6
better_index = arr2.loc[["a", "b", "c"], ["California", "Ohio", "Texas"]]
better_index
California	Ohio	Texas
a	2	0	1
b	8	6	7
c	5	3	4
del ano_better_index
ano_better_index = better_index.reindex(["a", "b", "c", "d"], fill_value=np.arange(3))
ano_better_index
California	Ohio	Texas
a	2.0	0.0	1.0
b	8.0	6.0	7.0
c	5.0	3.0	4.0
d	NaN	NaN	NaN
obj = pd.Series(np.arange(8), index=list("abcdefgh"))
obj
a    0
b    1
c    2
d    3
e    4
f    5
g    6
h    7
dtype: int32
obj.drop("d")
a    0
b    1
c    2
e    4
f    5
g    6
h    7
dtype: int32
obj.drop(["a", "h"])
b    1
c    2
d    3
e    4
f    5
g    6
dtype: int32
frame = pd.DataFrame(np.arange(16).reshape((4, 4)), index=list("abcd"), 
                    columns=["Ohio", "Texas", "Lagos", "Benin-city"])
frame
Ohio	Texas	Lagos	Benin-city
a	0	1	2	3
b	4	5	6	7
c	8	9	10	11
d	12	13	14	15
frame.drop("a")
Ohio	Texas	Lagos	Benin-city
b	4	5	6	7
c	8	9	10	11
d	12	13	14	15
drop_index = frame.drop(["a", "b"])
drop_columns = drop_index.drop(columns=["Ohio", "Lagos"])
drop_columns
Texas	Benin-city
c	9	11
d	13	15
import pandas as pd
import numpy as np
from pandas import Series, DataFrame
import matplotlib.pyplot as plt
x = np.arange(10)
plt.plot(x)
[<matplotlib.lines.Line2D at 0xb23aa30>]

d = np.random.randn(5)
plt.plot(d)
[<matplotlib.lines.Line2D at 0xb4c62f0>]

frame = pd.DataFrame(np.arange(16).reshape((4, 4)), index=["Ohio", "Colorado", "Utah", "Lagos"],
                    columns=["One", "Two", "Three", "Four"])
frame
One	Two	Three	Four
Ohio	0	1	2	3
Colorado	4	5	6	7
Utah	8	9	10	11
Lagos	12	13	14	15
frame.drop("Ohio")
One	Two	Three	Four
Colorado	4	5	6	7
Utah	8	9	10	11
Lagos	12	13	14	15
frame.drop("One", axis=1)
Two	Three	Four
Ohio	1	2	3
Colorado	5	6	7
Utah	9	10	11
Lagos	13	14	15
frame.drop("Four", axis="columns")
One	Two	Three
Ohio	0	1	2
Colorado	4	5	6
Utah	8	9	10
Lagos	12	13	14
frame.drop(columns="Two")
One	Three	Four
Ohio	0	2	3
Colorado	4	6	7
Utah	8	10	11
Lagos	12	14	15
frame.drop(columns=["One", "Three"])
Two	Four
Ohio	1	3
Colorado	5	7
Utah	9	11
Lagos	13	15
frame
One	Two	Three	Four
Ohio	0	1	2	3
Colorado	4	5	6	7
Utah	8	9	10	11
Lagos	12	13	14	15
frame.loc["Ohio"]
One      0
Two      1
Three    2
Four     3
Name: Ohio, dtype: int32
frame.loc[:"Utah"]
One	Two	Three	Four
Ohio	0	1	2	3
Colorado	4	5	6	7
Utah	8	9	10	11
frame.iloc[3]
One      12
Two      13
Three    14
Four     15
Name: Lagos, dtype: int32
frame.loc[["Colorado"],["Three"]]
Three
Colorado	6
frame.loc[: "Colorado"]
One	Two	Three	Four
Ohio	0	1	2	3
Colorado	4	5	6	7
frame.loc[:, ["Two"]
  File "<ipython-input-29-38034deeb134>", line 1
    frame.loc[:, ["Two"]
                        ^
SyntaxError: unexpected EOF while parsing


frame.drop(columns="Two")
One	Three	Four
Ohio	0	2	3
Colorado	4	6	7
Utah	8	10	11
Lagos	12	14	15
frame["One"]
Ohio         0
Colorado     4
Utah         8
Lagos       12
Name: One, dtype: int32
frame[["One", "Four"]]
One	Four
Ohio	0	3
Colorado	4	7
Utah	8	11
Lagos	12	15
obj = pd.Series([1.2, 1.3, 4.6, 8.7], index=list("abcd"))
obj["a"]
1.2
obj
a    1.2
b    1.3
c    4.6
d    8.7
dtype: float64
obj[1]
1.3
obj[1:3]
b    1.3
c    4.6
dtype: float64
obj["b":"d"]
b    1.3
c    4.6
d    8.7
dtype: float64
obj["b":"c"]
b    1.3
c    4.6
dtype: float64
obj[["a", "d", "c"]]
a    1.2
d    8.7
c    4.6
dtype: float64
obj[obj > 2]
c    4.6
d    8.7
dtype: float64
obj[obj > 2] = 10
obj
a     1.2
b     1.3
c    10.0
d    10.0
dtype: float64
frame
One	Two	Three	Four
Ohio	0	1	2	3
Colorado	4	5	6	7
Utah	8	9	10	11
Lagos	12	13	14	15
frame["Two"]
Ohio         1
Colorado     5
Utah         9
Lagos       13
Name: Two, dtype: int32
frame[:2]
One	Two	Three	Four
Ohio	0	1	2	3
Colorado	4	5	6	7
frame[frame["Three"] > 6] = 3
frame
One	Two	Three	Four
Ohio	0	1	2	3
Colorado	4	5	6	7
Utah	3	3	3	3
Lagos	3	3	3	3
frame["Four"]
Ohio        3
Colorado    7
Utah        3
Lagos       3
Name: Four, dtype: int32
frame <= 3
One	Two	Three	Four
Ohio	True	True	True	True
Colorado	False	False	False	False
Utah	True	True	True	True
Lagos	True	True	True	True
frame[frame <= 3] = np.arange(16).reshape((4, 4))
frame
One	Two	Three	Four
Ohio	0	1	2	3
Colorado	4	5	6	7
Utah	8	9	10	11
Lagos	12	13	14	15
frame.loc["Utah", ["One", "Two"]]
One    8
Two    9
Name: Utah, dtype: int32
frame.Three
Ohio         2
Colorado     6
Utah        10
Lagos       14
Name: Three, dtype: int32
a, b, c = np.arange(2, 8, 2)
a, b
(2, 4)
a
2
c
6
a, c
(2, 6)
c, b, a 
(6, 4, 2)
frame
One	Two	Three	Four
Ohio	0	1	2	3
Colorado	4	5	6	7
Utah	8	9	10	11
Lagos	12	13	14	15
see = frame.loc["Lagos", ["Two", "Four"]]
see.T
Two     13
Four    15
Name: Lagos, dtype: int32
see
Two     13
Four    15
Name: Lagos, dtype: int32
frame
One	Two	Three	Four
Ohio	0	1	2	3
Colorado	4	5	6	7
Utah	8	9	10	11
Lagos	12	13	14	15
frame.iloc[3, [3, 1, 2]]
Four     15
Two      13
Three    14
Name: Lagos, dtype: int32
frame.iloc[2]
One       8
Two       9
Three    10
Four     11
Name: Utah, dtype: int32
frame.iloc[[0, 3]]
One	Two	Three	Four
Ohio	0	1	2	3
Lagos	12	13	14	15
fra = frame.iloc[2]
stress = pd.Series(fra, index=["Ohio", "Lagos", "Ibadan", "Benin-city",
                               "One", "Two", "Three", "Four"])
stress
Ohio           NaN
Lagos          NaN
Ibadan         NaN
Benin-city     NaN
One            8.0
Two            9.0
Three         10.0
Four          11.0
Name: Utah, dtype: float64
relieve = stress.drop(["Ohio", "Lagos", "Ibadan", "Benin-city"])
relieve
One       8.0
Two       9.0
Three    10.0
Four     11.0
Name: Utah, dtype: float64
stress
Ohio           NaN
Lagos          NaN
Ibadan         NaN
Benin-city     NaN
One            8.0
Two            9.0
Three         10.0
Four          11.0
Name: Utah, dtype: float64
stress.dropna()
One       8.0
Two       9.0
Three    10.0
Four     11.0
Name: Utah, dtype: float64
frame
One	Two	Three	Four
Ohio	0	1	2	3
Colorado	4	5	6	7
Utah	8	9	10	11
Lagos	12	13	14	15
frame.iloc[[1, 3], [0, 2, 3]]
One	Three	Four
Colorado	4	6	7
Lagos	12	14	15
frame.loc[["Colorado", "Lagos"], ["One", "Two", "Three"]]
One	Two	Three
Colorado	4	5	6
Lagos	12	13	14
frame.loc[: "Lagos", "Three"]
Ohio         2
Colorado     6
Utah        10
Lagos       14
Name: Three, dtype: int32
frame
One	Two	Three	Four
Ohio	0	1	2	3
Colorado	4	5	6	7
Utah	8	9	10	11
Lagos	12	13	14	15
compare = frame.loc[: "Utah", : "Three"]
compare
One	Two	Three
Ohio	0	1	2
Colorado	4	5	6
Utah	8	9	10
frame.loc["Colorado" : "Lagos", "Two" : "Four"]
Two	Three	Four
Colorado	5	6	7
Utah	9	10	11
Lagos	13	14	15
frame.loc[["Colorado", "Utah", "Lagos"], ["Two", "Three", "Four"]]
Two	Three	Four
Colorado	5	6	7
Utah	9	10	11
Lagos	13	14	15
frame
One	Two	Three	Four
Ohio	0	1	2	3
Colorado	4	5	6	7
Utah	8	9	10	11
Lagos	12	13	14	15
compare
One	Two	Three
Ohio	0	1	2
Colorado	4	5	6
Utah	8	9	10
frame.iloc[0:3, 0:3]
One	Two	Three
Ohio	0	1	2
Colorado	4	5	6
Utah	8	9	10
frame.iloc[:, :3][frame.Two > 5]
One	Two	Three
Utah	8	9	10
Lagos	12	13	14
ser = pd.Series(np.arange(3.))
ser
0    0.0
1    1.0
2    2.0
dtype: float64
ano_ser = list(range(1, 5))
ano_ser
[1, 2, 3, 4]
ano_ser[-1]
4
look = pd.Series(ano_ser)
look
0    1
1    2
2    3
3    4
dtype: int64
look[1]
2
ser2 = pd.Series(np.arange(3.), index=list("abc"))
ser2
a    0.0
b    1.0
c    2.0
dtype: float64
ser2[-1]
2.0
ser[1]
1.0
ser[1:]
1    1.0
2    2.0
dtype: float64
ser.loc[1:]
1    1.0
2    2.0
dtype: float64
ser.iloc[1:]
1    1.0
2    2.0
dtype: float64
ser.iloc[-1]
2.0
ser[:1]
0    0.0
dtype: float64
ser.loc[:1]
0    0.0
1    1.0
dtype: float64
ser.iloc[:1]
0    0.0
dtype: float64
ser.loc[:2]
0    0.0
1    1.0
2    2.0
dtype: float64
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from pandas import Series, DataFrame
frame = pd.Series([1.3, 3.5, -4.6, 3.9], index=list("acde"))
frame2 = pd.Series([1.7, -8.9, -2.6, 2.4, 5.6], index=list("acefg"))
frame
a    1.3
c    3.5
d   -4.6
e    3.9
dtype: float64
frame2
a    1.7
c   -8.9
e   -2.6
f    2.4
g    5.6
dtype: float64
frame + frame2
a    3.0
c   -5.4
d    NaN
e    1.3
f    NaN
g    NaN
dtype: float64
df = pd.DataFrame(np.arange(9.).reshape((3, 3)), columns=["b", "c", "d"],
                 index=["Ohio", "Texas", "Colorado"])
df2 = pd.DataFrame(np.arange(12).reshape((4, 3)), columns=list("bde"),
                  index=["Utah", "Ohio", "Texas", "Oregon"])
occupy = df + df2
occupy
b	c	d	e
Colorado	NaN	NaN	NaN	NaN
Ohio	3.0	NaN	6.0	NaN
Oregon	NaN	NaN	NaN	NaN
Texas	9.0	NaN	12.0	NaN
Utah	NaN	NaN	NaN	NaN
df1 = pd.DataFrame(np.arange(12.).reshape((3, 4)), columns=list("abcd"))
df2 = pd.DataFrame(np.arange(20).reshape(4, 5), columns=list("abcde"))
df2
a	b	c	d	e
0	0	1	2	3	4
1	5	6	7	8	9
2	10	11	12	13	14
3	15	16	17	18	19
df3 = df1 + df2
df3
a	b	c	d	e
0	0.0	2.0	4.0	6.0	NaN
1	9.0	11.0	13.0	15.0	NaN
2	18.0	20.0	22.0	24.0	NaN
3	NaN	NaN	NaN	NaN	NaN
df2.loc[1, "b"]
6
df2
a	b	c	d	e
0	0	1	2	3	4
1	5	6	7	8	9
2	10	11	12	13	14
3	15	16	17	18	19
df2.loc[2, "e"]
14
df2.loc[1, "b"] = np.nan
df2
a	b	c	d	e
0	0	1.0	2	3	4
1	5	NaN	7	8	9
2	10	11.0	12	13	14
3	15	16.0	17	18	19
del df3
df1 + df2
a	b	c	d	e
0	0.0	2.0	4.0	6.0	NaN
1	9.0	NaN	13.0	15.0	NaN
2	18.0	20.0	22.0	24.0	NaN
3	NaN	NaN	NaN	NaN	NaN
df1.add(df2, fill_value=0)
a	b	c	d	e
0	0.0	2.0	4.0	6.0	4.0
1	9.0	5.0	13.0	15.0	9.0
2	18.0	20.0	22.0	24.0	14.0
3	15.0	16.0	17.0	18.0	19.0
df2
a	b	c	d	e
0	0	1.0	2	3	4
1	5	NaN	7	8	9
2	10	11.0	12	13	14
3	15	16.0	17	18	19
df1
a	b	c	d
0	0.0	1.0	2.0	3.0
1	4.0	5.0	6.0	7.0
2	8.0	9.0	10.0	11.0
1 / df1
a	b	c	d
0	inf	1.000000	0.500000	0.333333
1	0.250000	0.200000	0.166667	0.142857
2	0.125000	0.111111	0.100000	0.090909
df1.rdiv(1)
a	b	c	d
0	inf	1.000000	0.500000	0.333333
1	0.250000	0.200000	0.166667	0.142857
2	0.125000	0.111111	0.100000	0.090909
df / 2
b	c	d
Ohio	0.0	0.5	1.0
Texas	1.5	2.0	2.5
Colorado	3.0	3.5	4.0
df1 / 2
a	b	c	d
0	0.0	0.5	1.0	1.5
1	2.0	2.5	3.0	3.5
2	4.0	4.5	5.0	5.5
df1.rdiv(2)
a	b	c	d
0	inf	2.000000	1.000000	0.666667
1	0.500000	0.400000	0.333333	0.285714
2	0.250000	0.222222	0.200000	0.181818
2 / df1
a	b	c	d
0	inf	2.000000	1.000000	0.666667
1	0.500000	0.400000	0.333333	0.285714
2	0.250000	0.222222	0.200000	0.181818
df1.div(2)
a	b	c	d
0	0.0	0.5	1.0	1.5
1	2.0	2.5	3.0	3.5
2	4.0	4.5	5.0	5.5
df1 / 2
a	b	c	d
0	0.0	0.5	1.0	1.5
1	2.0	2.5	3.0	3.5
2	4.0	4.5	5.0	5.5
2 / df1
a	b	c	d
0	inf	2.000000	1.000000	0.666667
1	0.500000	0.400000	0.333333	0.285714
2	0.250000	0.222222	0.200000	0.181818
df1.rdiv(2)
a	b	c	d
0	inf	2.000000	1.000000	0.666667
1	0.500000	0.400000	0.333333	0.285714
2	0.250000	0.222222	0.200000	0.181818
df1 / 2
a	b	c	d
0	0.0	0.5	1.0	1.5
1	2.0	2.5	3.0	3.5
2	4.0	4.5	5.0	5.5
df1.div(2)
a	b	c	d
0	0.0	0.5	1.0	1.5
1	2.0	2.5	3.0	3.5
2	4.0	4.5	5.0	5.5
s = pd.Series([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
s
0    [1, 2, 3]
1    [4, 5, 6]
2    [7, 8, 9]
dtype: object
del d
d = pd.DataFrame(np.arange(9).reshape((3, 3)))
d
0	1	2
0	0	1	2
1	3	4	5
2	6	7	8
use = d.iloc[0]
use
0    0
1    1
2    2
Name: 0, dtype: int32
diff = d - use
diff
0	1	2
0	0	0	0
1	3	3	3
2	6	6	6
arr = np.arange(16).reshape((4, 4))
arr
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11],
       [12, 13, 14, 15]])
arr.ndim
2
s = arr[0]
find = arr - s
s
array([0, 1, 2, 3])
find
array([[ 0,  0,  0,  0],
       [ 4,  4,  4,  4],
       [ 8,  8,  8,  8],
       [12, 12, 12, 12]])
df1 = pd.DataFrame(arr, columns=list("bcde"), 
                  index=["Utah", "Texas", "Ohio", "Lagos"])
df1
b	c	d	e
Utah	0	1	2	3
Texas	4	5	6	7
Ohio	8	9	10	11
Lagos	12	13	14	15
series = df1.iloc[0]
series
b    0
c    1
d    2
e    3
Name: Utah, dtype: int32
series2 = pd.Series(np.arange(3), index=list("bef"))
series2
b    0
e    1
f    2
dtype: int32
pd.Series(range(3), index=list("abc"))
a    0
b    1
c    2
dtype: int64
df1
b	c	d	e
Utah	0	1	2	3
Texas	4	5	6	7
Ohio	8	9	10	11
Lagos	12	13	14	15
series2 = pd.Series(range(3), index=["b", "e", "f"])
series2
b    0
e    1
f    2
dtype: int64
df1 + series2
b	c	d	e	f
Utah	0.0	NaN	NaN	4.0	NaN
Texas	4.0	NaN	NaN	8.0	NaN
Ohio	8.0	NaN	NaN	12.0	NaN
Lagos	12.0	NaN	NaN	16.0	NaN
df1
b	c	d	e
Utah	0	1	2	3
Texas	4	5	6	7
Ohio	8	9	10	11
Lagos	12	13	14	15
series2
b    0
e    1
f    2
dtype: int64
sane = df1 + series2
sane
b	c	d	e	f
Utah	0.0	NaN	NaN	4.0	NaN
Texas	4.0	NaN	NaN	8.0	NaN
Ohio	8.0	NaN	NaN	12.0	NaN
Lagos	12.0	NaN	NaN	16.0	NaN
sane.dropna(axis=1)
b	e
Utah	0.0	4.0
Texas	4.0	8.0
Ohio	8.0	12.0
Lagos	12.0	16.0
series3 = df1["d"]
df1
b	c	d	e
Utah	0	1	2	3
Texas	4	5	6	7
Ohio	8	9	10	11
Lagos	12	13	14	15
series3
Utah      2
Texas     6
Ohio     10
Lagos    14
Name: d, dtype: int32
df1.sub(series3, axis="index")
b	c	d	e
Utah	-2	-1	0	1
Texas	-2	-1	0	1
Ohio	-2	-1	0	1
Lagos	-2	-1	0	1
df1.sub(series3, axis="index")
b	c	d	e
Utah	-2	-1	0	1
Texas	-2	-1	0	1
Ohio	-2	-1	0	1
Lagos	-2	-1	0	1
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from pandas import Series, DataFrame
frame = pd.DataFrame(np.random.randn(4, 3), index=["Utah", "Ohio", "Texas", "Oregon"],
                    columns=list("bde"))
frame
b	d	e
Utah	-0.353051	1.142067	2.447782
Ohio	-1.749307	-1.059317	1.181761
Texas	0.669105	-0.453190	-0.662897
Oregon	0.866688	-0.253397	1.418230
say = np.random.randn(4, 3)
plt.plot(say)
plt.xlabel("population"); plt.ylabel("Height")
Text(0, 0.5, 'Height')

frame
b	d	e
Utah	-0.353051	1.142067	2.447782
Ohio	-1.749307	-1.059317	1.181761
Texas	0.669105	-0.453190	-0.662897
Oregon	0.866688	-0.253397	1.418230
frame["b"]
Utah     -0.353051
Ohio     -1.749307
Texas     0.669105
Oregon    0.866688
Name: b, dtype: float64
frame.loc["Utah", "e"]
2.447782166149058
frame.iloc[1, [0, 2]]
b   -1.749307
e    1.181761
Name: Ohio, dtype: float64
np.abs(frame)
b	d	e
Utah	0.353051	1.142067	2.447782
Ohio	1.749307	1.059317	1.181761
Texas	0.669105	0.453190	0.662897
Oregon	0.866688	0.253397	1.418230
frame
b	d	e
Utah	-0.353051	1.142067	2.447782
Ohio	-1.749307	-1.059317	1.181761
Texas	0.669105	-0.453190	-0.662897
Oregon	0.866688	-0.253397	1.418230
frame.abs()
b	d	e
Utah	0.353051	1.142067	2.447782
Ohio	1.749307	1.059317	1.181761
Texas	0.669105	0.453190	0.662897
Oregon	0.866688	0.253397	1.418230
frame.min() - frame.max()
b   -2.615995
d   -2.201384
e   -3.110679
dtype: float64
frame.min()
b   -1.749307
d   -1.059317
e   -0.662897
dtype: float64
frame.max()
b    0.866688
d    1.142067
e    2.447782
dtype: float64
frame.mean()
b   -0.141641
d   -0.155959
e    1.096219
dtype: float64
frame.var()
b    1.434440
d    0.866256
e    1.677407
dtype: float64
frame.std()
b    1.197681
d    0.930729
e    1.295148
dtype: float64
f = lambda x: x.max() - x.min()
frame.apply(f)
b    2.615995
d    2.201384
e    3.110679
dtype: float64
frame.max() - frame.min()
b    2.615995
d    2.201384
e    3.110679
dtype: float64
del s
a = pd.Series([[1, 3, 5, 7], [2, 4, 6, 8]])
a
0    [1, 3, 5, 7]
1    [2, 4, 6, 8]
dtype: object
a.min()
[1, 3, 5, 7]
a[0].min()
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-46-983c70e7c94b> in <module>
----> 1 a[0].min()

AttributeError: 'list' object has no attribute 'min'

a[0]
[1, 3, 5, 7]
b = pd.Series(np.arange(3, 21, 3))
b
0     3
1     6
2     9
3    12
4    15
5    18
dtype: int32
b.min()
3
b.max()
18
b.max() - b.min()
15
b.mean()
10.5
b.var()
31.5
b.std()
5.612486080160912
b.iloc[4] - b.mean()
4.5
frame
b	d	e
Utah	-0.353051	1.142067	2.447782
Ohio	-1.749307	-1.059317	1.181761
Texas	0.669105	-0.453190	-0.662897
Oregon	0.866688	-0.253397	1.418230
frame.apply(f)
b    2.615995
d    2.201384
e    3.110679
dtype: float64
frame.apply(f, axis="columns")
Utah      2.800833
Ohio      2.931068
Texas     1.332002
Oregon    1.671627
dtype: float64
frame
b	d	e
Utah	-0.353051	1.142067	2.447782
Ohio	-1.749307	-1.059317	1.181761
Texas	0.669105	-0.453190	-0.662897
Oregon	0.866688	-0.253397	1.418230
def f(x):
    return pd.Series([x.mean(), x.var(), x.std(), x.max(), x.min()], index=["mean", "variance",
                    "standard deviation", "maximum", "mininum"])
row = frame.apply(f)
row.abs()
b	d	e
mean	0.141641	0.155959	1.096219
variance	1.434440	0.866256	1.677407
standard deviation	1.197681	0.930729	1.295148
maximum	0.866688	1.142067	2.447782
mininum	1.749307	1.059317	0.662897
col = frame.apply(f, axis="columns")
col
mean	variance	standard deviation	maximum	mininum
Utah	1.078933	1.964156	1.401483	2.447782	-0.353051
Ohio	-0.542287	2.348279	1.532410	1.181761	-1.749307
Texas	-0.148994	0.512959	0.716211	0.669105	-0.662897
Oregon	0.677173	0.725521	0.851775	1.418230	-0.253397
col.abs()
mean	variance	standard deviation	maximum	mininum
Utah	1.078933	1.964156	1.401483	2.447782	0.353051
Ohio	0.542287	2.348279	1.532410	1.181761	1.749307
Texas	0.148994	0.512959	0.716211	0.669105	0.662897
Oregon	0.677173	0.725521	0.851775	1.418230	0.253397
row.abs()
b	d	e
mean	0.141641	0.155959	1.096219
variance	1.434440	0.866256	1.677407
standard deviation	1.197681	0.930729	1.295148
maximum	0.866688	1.142067	2.447782
mininum	1.749307	1.059317	0.662897
frame
b	d	e
Utah	-0.353051	1.142067	2.447782
Ohio	-1.749307	-1.059317	1.181761
Texas	0.669105	-0.453190	-0.662897
Oregon	0.866688	-0.253397	1.418230
format = lambda x: "%.4f" % x
frame.applymap(format)
b	d	e
Utah	-0.3531	1.1421	2.4478
Ohio	-1.7493	-1.0593	1.1818
Texas	0.6691	-0.4532	-0.6629
Oregon	0.8667	-0.2534	1.4182
frame["b"].map(format)
Utah      -0.3531
Ohio      -1.7493
Texas      0.6691
Oregon     0.8667
Name: b, dtype: object
obj = pd.Series(np.arange(4), index=list("dcba"))
obj
d    0
c    1
b    2
a    3
dtype: int32
obj.sort_index()
a    3
b    2
c    1
d    0
dtype: int32
frame = pd.DataFrame(np.arange(8).reshape((2, 4)), index=["three", "one"],
                    columns=list("dcba"))
frame
d	c	b	a
three	0	1	2	3
one	4	5	6	7
frame.sort_index()
d	c	b	a
one	4	5	6	7
three	0	1	2	3
frame.sort_index(1)
a	b	c	d
three	3	2	1	0
one	7	6	5	4
first_sort = frame.sort_index()
second_sort = first_sort.sort_index(1)
second_sort
a	b	c	d
one	7	6	5	4
three	3	2	1	0
val = pd.Series([3, -2, 4, 1, 10, 5])
val
0     3
1    -2
2     4
3     1
4    10
5     5
dtype: int64
val.sort_values()
1    -2
3     1
0     3
2     4
5     5
4    10
dtype: int64
vague = pd.Series([4, np.nan, 2, 7, np.nan, 3, 22, 8])
vague
0     4.0
1     NaN
2     2.0
3     7.0
4     NaN
5     3.0
6    22.0
7     8.0
dtype: float64
vague.sort_values()
2     2.0
5     3.0
0     4.0
3     7.0
7     8.0
6    22.0
1     NaN
4     NaN
dtype: float64
frame = pd.DataFrame({"a": [-3, 4, 1, 5, 8], "b": [3, -3, 9, 7, 2]})
frame
a	b
0	-3	3
1	4	-3
2	1	9
3	5	7
4	8	2
frame.sort_values(by="b")
a	b
1	4	-3
4	8	2
0	-3	3
3	5	7
2	1	9
frame.sort_values(by=["a", "b"])
a	b
0	-3	3
2	1	9
1	4	-3
3	5	7
4	8	2
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from pandas import Series, DataFrame
num = pd.DataFrame({"a": [1, -3, 4, -7, 2], "b": [3, 6, -8, -3, 5]}, index=[3, 2, 1, 5, 4])
num
a	b
3	1	3
2	-3	6
1	4	-8
5	-7	-3
4	2	5
num.iloc[4]
a    2
b    5
Name: 4, dtype: int64
num.sort_values(by="b")
a	b
1	4	-8
5	-7	-3
3	1	3
4	2	5
2	-3	6
num
a	b
3	1	3
2	-3	6
1	4	-8
5	-7	-3
4	2	5
num.sort_index()
a	b
1	4	-8
2	-3	6
3	1	3
4	2	5
5	-7	-3
sort_by_index = num.sort_index()
sort_by_index
a	b
1	4	-8
2	-3	6
3	1	3
4	2	5
5	-7	-3
del sort_by_values
s = pd.Series(np.arange(5), index=list("aabbc"))
s
a    0
a    1
b    2
b    3
c    4
dtype: int32
s2 = pd.Series(np.arange(5), index=list("abcde"))
s2
a    0
b    1
c    2
d    3
e    4
dtype: int32
s.index.is_unique
False
s.values.is_unique
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-32-fb107ba2df8a> in <module>
----> 1 s.values.is_unique

AttributeError: 'numpy.ndarray' object has no attribute 'is_unique'

s
a    0
a    1
b    2
b    3
c    4
dtype: int32
s2
a    0
b    1
c    2
d    3
e    4
dtype: int32
s.index = ["one", "two", "three", "four", "five"]
s
one      0
two      1
three    2
four     3
five     4
dtype: int32
s.index = list("aabbc")
s
a    0
a    1
b    2
b    3
c    4
dtype: int32
s2.index.is_unique
True
s.index.is_unique
False
s["a"]
a    0
a    1
dtype: int32
s["c"]
4
d = pd.DataFrame(np.random.randn(4, 3), index=list("aabc"), columns=["Lagos", "Benin-city", "UK"])
d
Lagos	Benin-city	UK
a	-0.475212	-1.258506	-1.697592
a	0.757676	0.061980	-1.868146
b	0.329473	0.002301	0.240640
c	0.115309	1.032768	-1.051289
d.loc["a"]
Lagos	Benin-city	UK
a	-0.475212	-1.258506	-1.697592
a	0.757676	0.061980	-1.868146
d.loc["c"]
Lagos         0.115309
Benin-city    1.032768
UK           -1.051289
Name: c, dtype: float64
d2 = pd.DataFrame([[1.4, np.nan], [9.8, 7.6], [np.nan, np.nan], [2.3, 4.5]], 
                 index=["a", "b", "c", "d"], columns=["one", "two"])
d2
one	two
a	1.4	NaN
b	9.8	7.6
c	NaN	NaN
d	2.3	4.5
s2.sum
<bound method Series.sum of a    0
b    1
c    2
d    3
e    4
dtype: int32>
s2.sum()
10
s2
a    0
b    1
c    2
d    3
e    4
dtype: int32
d2.sum()
one    13.5
two    12.1
dtype: float64
d2["one"]
a    1.4
b    9.8
c    NaN
d    2.3
Name: one, dtype: float64
d2.sum(1)
a     1.4
b    17.4
c     0.0
d     6.8
dtype: float64
d2.sum(axis=1)
a     1.4
b    17.4
c     0.0
d     6.8
dtype: float64
d2.idxmax()
one    b
two    b
dtype: object
d2
one	two
a	1.4	NaN
b	9.8	7.6
c	NaN	NaN
d	2.3	4.5
d2.idxmin()
one    a
two    d
dtype: object
d2.cumsum()
one	two
a	1.4	NaN
b	11.2	7.6
c	NaN	NaN
d	13.5	12.1
d2.cumsum(axis="columns")
one	two
a	1.4	NaN
b	9.8	17.4
c	NaN	NaN
d	2.3	6.8
d2
one	two
a	1.4	NaN
b	9.8	7.6
c	NaN	NaN
d	2.3	4.5
d2.describe()
one	two
count	3.000000	2.000000
mean	4.500000	6.050000
std	4.611941	2.192031
min	1.400000	4.500000
25%	1.850000	5.275000
50%	2.300000	6.050000
75%	6.050000	6.825000
max	9.800000	7.600000
d2.mean()
one    4.50
two    6.05
dtype: float64
d2.count()
one    3
two    2
dtype: int64
d2.describe()
one	two
count	3.000000	2.000000
mean	4.500000	6.050000
std	4.611941	2.192031
min	1.400000	4.500000
25%	1.850000	5.275000
50%	2.300000	6.050000
75%	6.050000	6.825000
max	9.800000	7.600000
d2.quantile()
one    2.30
two    6.05
Name: 0.5, dtype: float64
d2.median()
one    2.30
two    6.05
dtype: float64
d2.mode()
one	two
0	1.4	4.5
1	2.3	7.6
2	9.8	NaN
stock_prices = pd.read_csv("stock.csv")
stock_prices.head()
Unnamed: 0	AA	AAPL	GE	IBM	JNJ	MSFT	PEP	SPX	XOM
0	2/1/1990 0:00	4.98	7.86	2.87	16.79	4.27	0.51	6.04	328.79	6.12
1	2/2/1990 0:00	5.04	8.00	2.87	16.89	4.37	0.51	6.09	330.92	6.24
2	2/5/1990 0:00	5.07	8.18	2.87	17.32	4.34	0.51	6.05	331.85	6.25
3	2/6/1990 0:00	5.01	8.12	2.88	17.56	4.32	0.51	6.15	329.66	6.23
4	2/7/1990 0:00	5.04	7.77	2.91	17.93	4.38	0.51	6.17	333.75	6.33
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt 
from pandas import Series, DataFrame
s = pd.Series(list("ccbeeabcaaccbbacb"))
s
0     c
1     c
2     b
3     e
4     e
5     a
6     b
7     c
8     a
9     a
10    c
11    c
12    b
13    b
14    a
15    c
16    b
dtype: object
s.value_counts()
c    6
b    5
a    4
e    2
dtype: int64
s.isin(["a", "c"])
0      True
1      True
2     False
3     False
4     False
5      True
6     False
7      True
8      True
9      True
10     True
11     True
12    False
13    False
14     True
15     True
16    False
dtype: bool
3 + 3
6
def f(x, y):
    return x + y
h = f(3, 4)
h
7
hi = lambda a, b: a + b
c = hi(5, 5)
c
10
g = f(19, 21)
g
40
del name
name = input("Enter name: ")
print("Hello ", name, "Welcome to MAINONE DATASCIENCE training")
Enter name: Nehita
Hello  Nehita Welcome to MAINONE DATASCIENCE training
def hello(name= input("Enter your name")):
    return "Welcome, ", name
g = hello()
print("hello world")
hello world
name = input("Enter name: ")
colour = input("What is your favourite colour: ")
print("Hello!", name, " your favourite colour is ", colour)
print("hello")
import pandas_datareader.data as web
import pandas as pd
import numpy as np
from pandas import DataFrame, Series
import pandas_datareader.data as web
all_data = {ticker: web.get_data_yahoo(ticker)
           for ticker in ["AAPL", "IBM", "MSFT", "GOOG"]}
price = pd.DataFrame({ticker: data["Adj Close"]
                    for ticker, data in all_data.items()})
volume = pd.DataFrame({ticker: data["Volume"]
                      for ticker, data in all_data.items()})
all_data
{'AAPL':                   High         Low        Open       Close       Volume  \
 Date                                                                      
 2010-01-04   30.642857   30.340000   30.490000   30.572857  123432400.0   
 2010-01-05   30.798571   30.464285   30.657143   30.625713  150476200.0   
 2010-01-06   30.747143   30.107143   30.625713   30.138571  138040000.0   
 2010-01-07   30.285715   29.864286   30.250000   30.082857  119282800.0   
 2010-01-08   30.285715   29.865715   30.042856   30.282858  111902700.0   
 2010-01-11   30.428572   29.778572   30.400000   30.015715  115557400.0   
 2010-01-12   29.967142   29.488571   29.884285   29.674286  148614900.0   
 2010-01-13   30.132856   29.157143   29.695715   30.092857  151473000.0   
 2010-01-14   30.065714   29.860001   30.015715   29.918571  108223500.0   
 2010-01-15   30.228571   29.410000   30.132856   29.418571  148516900.0   
 2010-01-19   30.741428   29.605715   29.761429   30.719999  182501900.0   
 2010-01-20   30.792856   29.928572   30.701429   30.247143  153038200.0   
 2010-01-21   30.472857   29.601429   30.297142   29.724285  152038600.0   
 2010-01-22   29.642857   28.165714   29.540001   28.250000  220441900.0   
 2010-01-25   29.242857   28.598572   28.930000   29.010000  266424900.0   
 2010-01-26   30.530001   28.940001   29.421429   29.420000  466777500.0   
 2010-01-27   30.082857   28.504286   29.549999   29.697144  430642100.0   
 2010-01-28   29.357143   28.385714   29.275715   28.469999  293375600.0   
 2010-01-29   28.885714   27.178572   28.725714   27.437143  311488100.0   
 2010-02-01   28.000000   27.328571   27.481428   27.818571  187469100.0   
 2010-02-02   28.045713   27.625713   27.987143   27.980000  174585600.0   
 2010-02-03   28.600000   27.774286   27.881428   28.461428  153832000.0   
 2010-02-04   28.338572   27.367144   28.104286   27.435715  189413000.0   
 2010-02-05   28.000000   27.264286   27.518572   27.922857  212576700.0   
 2010-02-08   28.268572   27.714285   27.955715   27.731428  119567700.0   
 2010-02-09   28.214285   27.821428   28.059999   28.027143  158221700.0   
 2010-02-10   28.085714   27.751429   27.984285   27.874287   92590400.0   
 2010-02-11   28.535715   27.722857   27.840000   28.381428  137586400.0   
 2010-02-12   28.805714   27.928572   28.301428   28.625713  163867200.0   
 2010-02-16   29.098572   28.788572   28.848572   29.057142  135934400.0   
 ...                ...         ...         ...         ...          ...   
 2019-06-25  199.259995  195.289993  198.429993  195.570007   21070300.0   
 2019-06-26  200.990005  197.350006  197.770004  199.800003   26067500.0   
 2019-06-27  201.570007  199.570007  200.289993  199.740005   20899700.0   
 2019-06-28  199.500000  197.050003  198.679993  197.919998   31110600.0   
 2019-07-01  204.490005  200.649994  203.169998  201.550003   27316700.0   
 2019-07-02  203.130005  201.360001  201.410004  202.729996   16935200.0   
 2019-07-03  204.440002  202.690002  203.279999  204.410004   11362000.0   
 2019-07-05  205.080002  202.899994  203.350006  204.229996   17265500.0   
 2019-07-08  201.399994  198.410004  200.809998  200.020004   25338600.0   
 2019-07-09  201.509995  198.809998  199.199997  201.240005   20578000.0   
 2019-07-10  203.729996  201.559998  201.850006  203.229996   17897100.0   
 2019-07-11  204.389999  201.710007  203.309998  201.750000   20191800.0   
 2019-07-12  204.000000  202.199997  202.449997  203.300003   17595200.0   
 2019-07-15  205.869995  204.000000  204.089996  205.210007   16947400.0   
 2019-07-16  206.110001  203.500000  204.589996  204.500000   16866800.0   
 2019-07-17  205.089996  203.270004  204.050003  203.350006   14107500.0   
 2019-07-18  205.880005  203.699997  204.000000  205.660004   18582200.0   
 2019-07-19  206.500000  202.360001  205.789993  202.589996   20929300.0   
 2019-07-22  207.229996  203.610001  203.649994  207.220001   22277900.0   
 2019-07-23  208.910004  207.289993  208.460007  208.839996   18355200.0   
 2019-07-24  209.149994  207.169998  207.669998  208.669998   14991600.0   
 2019-07-25  209.240005  206.729996  208.889999  207.020004   13909600.0   
 2019-07-26  209.729996  207.139999  207.479996  207.740005   17618900.0   
 2019-07-29  210.639999  208.440002  208.460007  209.679993   21673400.0   
 2019-07-30  210.160004  207.309998  208.759995  208.779999   33935700.0   
 2019-07-31  221.369995  211.300003  216.419998  213.039993   69281400.0   
 2019-08-01  218.029999  206.740005  213.899994  208.429993   54017900.0   
 2019-08-02  206.429993  201.630005  205.529999  204.020004   40862100.0   
 2019-08-05  198.649994  192.580002  197.990005  193.339996   52393000.0   
 2019-08-06  198.070007  194.039993  196.309998  197.000000   35824800.0   
 
              Adj Close  
 Date                    
 2010-01-04   26.782711  
 2010-01-05   26.829010  
 2010-01-06   26.402260  
 2010-01-07   26.353460  
 2010-01-08   26.528664  
 2010-01-11   26.294640  
 2010-01-12   25.995537  
 2010-01-13   26.362217  
 2010-01-14   26.209538  
 2010-01-15   25.771528  
 2010-01-19   26.911612  
 2010-01-20   26.497383  
 2010-01-21   26.039341  
 2010-01-22   24.747818  
 2010-01-25   25.413599  
 2010-01-26   25.772774  
 2010-01-27   26.015560  
 2010-01-28   24.940546  
 2010-01-29   24.035734  
 2010-02-01   24.369871  
 2010-02-02   24.511295  
 2010-02-03   24.933033  
 2010-02-04   24.034487  
 2010-02-05   24.461227  
 2010-02-08   24.293537  
 2010-02-09   24.552589  
 2010-02-10   24.418684  
 2010-02-11   24.862957  
 2010-02-12   25.076958  
 2010-02-16   25.454903  
 ...                ...  
 2019-06-25  195.570007  
 2019-06-26  199.800003  
 2019-06-27  199.740005  
 2019-06-28  197.919998  
 2019-07-01  201.550003  
 2019-07-02  202.729996  
 2019-07-03  204.410004  
 2019-07-05  204.229996  
 2019-07-08  200.020004  
 2019-07-09  201.240005  
 2019-07-10  203.229996  
 2019-07-11  201.750000  
 2019-07-12  203.300003  
 2019-07-15  205.210007  
 2019-07-16  204.500000  
 2019-07-17  203.350006  
 2019-07-18  205.660004  
 2019-07-19  202.589996  
 2019-07-22  207.220001  
 2019-07-23  208.839996  
 2019-07-24  208.669998  
 2019-07-25  207.020004  
 2019-07-26  207.740005  
 2019-07-29  209.679993  
 2019-07-30  208.779999  
 2019-07-31  213.039993  
 2019-08-01  208.429993  
 2019-08-02  204.020004  
 2019-08-05  193.339996  
 2019-08-06  197.000000  
 
 [2414 rows x 6 columns],
 'IBM':                   High         Low        Open       Close      Volume  \
 Date                                                                     
 2010-01-04  132.970001  130.850006  131.179993  132.449997   6155300.0   
 2010-01-05  131.850006  130.100006  131.679993  130.850006   6841400.0   
 2010-01-06  131.490005  129.809998  130.679993  130.000000   5605300.0   
 2010-01-07  130.250000  128.910004  129.869995  129.550003   5840600.0   
 2010-01-08  130.919998  129.050003  129.070007  130.850006   4197200.0   
 2010-01-11  131.059998  128.669998  131.059998  129.479996   5730400.0   
 2010-01-12  131.330002  129.000000  129.029999  130.509995   8081500.0   
 2010-01-13  131.119995  129.160004  130.389999  130.229996   6455400.0   
 2010-01-14  132.710007  129.910004  130.550003  132.309998   7111800.0   
 2010-01-15  132.889999  131.089996  132.029999  131.779999   8494400.0   
 2010-01-19  134.250000  131.559998  131.630005  134.139999  13916200.0   
 2010-01-20  131.149994  128.949997  130.460007  130.250000  15197500.0   
 2010-01-21  130.690002  128.059998  130.470001  129.000000   9608600.0   
 2010-01-22  128.889999  125.370003  128.669998  125.500000  10088600.0   
 2010-01-25  126.889999  125.709999  126.330002  126.120003   5738500.0   
 2010-01-26  127.750000  125.410004  125.919998  125.750000   7135300.0   
 2010-01-27  126.959999  125.040001  125.820000  126.330002   8719200.0   
 2010-01-28  127.040001  123.050003  127.029999  123.750000   9622200.0   
 2010-01-29  125.000000  121.900002  124.320000  122.389999  11571200.0   
 2010-02-01  124.949997  122.779999  123.230003  124.669998   7242900.0   
 2010-02-02  125.809998  123.949997  124.790001  125.529999   5899900.0   
 2010-02-03  126.070000  125.070000  125.160004  125.660004   4177100.0   
 2010-02-04  125.440002  122.900002  125.190002  123.000000   9126900.0   
 2010-02-05  123.720001  121.830002  123.040001  123.519997   8617000.0   
 2010-02-08  123.220001  121.739998  123.150002  121.879997   5718500.0   
 2010-02-09  124.199997  122.459999  122.650002  123.209999   6044500.0   
 2010-02-10  123.650002  122.209999  122.940002  122.809998   5219100.0   
 2010-02-11  124.199997  122.059998  122.580002  123.730003   5089000.0   
 2010-02-12  124.050003  121.610001  123.010002  124.000000   8017700.0   
 2010-02-16  125.230003  124.110001  124.910004  125.230003   6777300.0   
 ...                ...         ...         ...         ...         ...   
 2019-06-25  139.550003  138.130005  139.460007  138.360001   2801200.0   
 2019-06-26  139.679993  138.410004  138.869995  138.520004   2284600.0   
 2019-06-27  139.300003  137.949997  138.720001  138.520004   2149800.0   
 2019-06-28  139.139999  137.839996  138.570007  137.899994   6153900.0   
 2019-07-01  141.490005  139.279999  139.600006  139.880005   3377700.0   
 2019-07-02  140.429993  139.470001  139.750000  140.220001   2409700.0   
 2019-07-03  141.820007  140.429993  140.720001  141.539993   1930400.0   
 2019-07-05  141.490005  139.910004  140.869995  141.380005   2134700.0   
 2019-07-08  141.289993  140.270004  141.050003  140.570007   2395300.0   
 2019-07-09  140.990005  139.130005  140.610001  139.330002   3365200.0   
 2019-07-10  141.910004  139.789993  140.000000  140.470001   2513900.0   
 2019-07-11  141.580002  140.300003  140.789993  141.240005   2132900.0   
 2019-07-12  142.919998  141.660004  141.919998  142.740005   2786200.0   
 2019-07-15  143.509995  142.119995  142.889999  143.320007   2368300.0   
 2019-07-16  144.039993  143.020004  143.169998  143.529999   3474700.0   
 2019-07-17  143.800003  141.949997  143.610001  143.070007   6064300.0   
 2019-07-18  150.309998  142.199997  142.500000  149.630005  12695400.0   
 2019-07-19  151.580002  149.550003  149.960007  149.679993   7290700.0   
 2019-07-22  151.940002  149.699997  150.160004  149.740005   4092600.0   
 2019-07-23  150.720001  148.380005  150.570007  150.380005   3742200.0   
 2019-07-24  151.449997  149.199997  150.119995  150.029999   2952400.0   
 2019-07-25  150.619995  148.610001  149.820007  150.389999   3102100.0   
 2019-07-26  151.410004  150.100006  151.000000  151.360001   2904300.0   
 2019-07-29  151.479996  150.320007  151.110001  150.880005   2075500.0   
 2019-07-30  150.399994  149.220001  150.000000  149.770004   2632700.0   
 2019-07-31  150.179993  146.389999  149.699997  148.240005   3722900.0   
 2019-08-01  152.820007  148.500000  148.899994  150.320007   6344000.0   
 2019-08-02  152.949997  145.589996  149.029999  147.250000   8101700.0   
 2019-08-05  145.100006  139.149994  144.979996  140.759995   7114900.0   
 2019-08-06  142.470001  139.309998  142.029999  140.729996   5070700.0   
 
              Adj Close  
 Date                    
 2010-01-04   98.142967  
 2010-01-05   96.957375  
 2010-01-06   96.327530  
 2010-01-07   95.994110  
 2010-01-08   96.957375  
 2010-01-11   95.942223  
 2010-01-12   96.705429  
 2010-01-13   96.497971  
 2010-01-14   98.039223  
 2010-01-15   97.646492  
 2010-01-19   99.395187  
 2010-01-20   96.512794  
 2010-01-21   95.586586  
 2010-01-22   92.993134  
 2010-01-25   93.452568  
 2010-01-26   93.178391  
 2010-01-27   93.608154  
 2010-01-28   91.696426  
 2010-01-29   90.688683  
 2010-02-01   92.378105  
 2010-02-02   93.015366  
 2010-02-03   93.111717  
 2010-02-04   91.140678  
 2010-02-05   91.525970  
 2010-02-08   90.714714  
 2010-02-09   91.704597  
 2010-02-10   91.406891  
 2010-02-11   92.091652  
 2010-02-12   92.292587  
 2010-02-16   93.208115  
 ...                ...  
 2019-06-25  136.748734  
 2019-06-26  136.906876  
 2019-06-27  136.906876  
 2019-06-28  136.294083  
 2019-07-01  138.251038  
 2019-07-02  138.587082  
 2019-07-03  139.891693  
 2019-07-05  139.733566  
 2019-07-08  138.933014  
 2019-07-09  137.707443  
 2019-07-10  138.834167  
 2019-07-11  139.595200  
 2019-07-12  141.077728  
 2019-07-15  141.650986  
 2019-07-16  141.858536  
 2019-07-17  141.403900  
 2019-07-18  147.887497  
 2019-07-19  147.936905  
 2019-07-22  147.996216  
 2019-07-23  148.628769  
 2019-07-24  148.282837  
 2019-07-25  148.638641  
 2019-07-26  149.597351  
 2019-07-29  149.122940  
 2019-07-30  148.025864  
 2019-07-31  146.513687  
 2019-08-01  148.569458  
 2019-08-02  145.535202  
 2019-08-05  139.120789  
 2019-08-06  139.091141  
 
 [2414 rows x 6 columns],
 'MSFT':                   High         Low        Open       Close       Volume  \
 Date                                                                      
 2010-01-04   31.100000   30.590000   30.620001   30.950001   38409100.0   
 2010-01-05   31.100000   30.639999   30.850000   30.959999   49749600.0   
 2010-01-06   31.080000   30.520000   30.879999   30.770000   58182400.0   
 2010-01-07   30.700001   30.190001   30.629999   30.450001   50559700.0   
 2010-01-08   30.879999   30.240000   30.280001   30.660000   51197400.0   
 2010-01-11   30.760000   30.120001   30.709999   30.270000   68754700.0   
 2010-01-12   30.400000   29.910000   30.150000   30.070000   65912100.0   
 2010-01-13   30.520000   30.010000   30.260000   30.350000   51863500.0   
 2010-01-14   31.100000   30.260000   30.309999   30.959999   63228100.0   
 2010-01-15   31.240000   30.709999   31.080000   30.860001   79913200.0   
 2010-01-19   31.240000   30.680000   30.750000   31.100000   46575700.0   
 2010-01-20   30.940001   30.309999   30.809999   30.590000   54849500.0   
 2010-01-21   30.719999   30.000000   30.610001   30.010000   73086700.0   
 2010-01-22   30.200001   28.840000   30.000000   28.959999  102004600.0   
 2010-01-25   29.660000   29.100000   29.240000   29.320000   63373000.0   
 2010-01-26   29.850000   29.090000   29.200001   29.500000   66639900.0   
 2010-01-27   29.820000   29.020000   29.350000   29.670000   63949500.0   
 2010-01-28   29.870001   28.889999   29.840000   29.160000  117513700.0   
 2010-01-29   29.920000   27.660000   29.900000   28.180000  193888500.0   
 2010-02-01   28.480000   27.920000   28.389999   28.410000   85931100.0   
 2010-02-02   28.500000   28.139999   28.370001   28.459999   54413700.0   
 2010-02-03   28.790001   28.120001   28.260000   28.629999   61397900.0   
 2010-02-04   28.500000   27.809999   28.379999   27.840000   77850000.0   
 2010-02-05   28.280001   27.570000   28.000000   28.020000   80960100.0   
 2010-02-08   28.080000   27.570000   28.010000   27.719999   52820600.0   
 2010-02-09   28.340000   27.750000   27.969999   28.010000   59195800.0   
 2010-02-10   28.240000   27.840000   28.030001   27.990000   48591300.0   
 2010-02-11   28.400000   27.700001   27.930000   28.120001   65993700.0   
 2010-02-12   28.059999   27.580000   27.809999   27.930000   81117200.0   
 2010-02-16   28.370001   28.020000   28.129999   28.350000   51935600.0   
 ...                ...         ...         ...         ...          ...   
 2019-06-25  137.589996  132.729996  137.250000  133.429993   33327400.0   
 2019-06-26  135.740005  133.600006  134.350006  133.929993   23657700.0   
 2019-06-27  134.710007  133.509995  134.139999  134.149994   16557500.0   
 2019-06-28  134.600006  133.160004  134.570007  133.960007   30043000.0   
 2019-07-01  136.699997  134.970001  136.630005  135.679993   22654200.0   
 2019-07-02  136.589996  135.339996  136.119995  136.580002   15237800.0   
 2019-07-03  137.740005  136.289993  136.800003  137.460007   13629300.0   
 2019-07-05  137.330002  135.720001  135.940002  137.059998   18141100.0   
 2019-07-08  137.100006  135.369995  136.399994  136.960007   16779700.0   
 2019-07-09  136.970001  135.800003  136.000000  136.460007   19953100.0   
 2019-07-10  138.580002  137.020004  137.130005  137.850006   24204400.0   
 2019-07-11  139.220001  137.869995  138.199997  138.399994   22327900.0   
 2019-07-12  139.130005  138.009995  138.850006  138.899994   18936800.0   
 2019-07-15  139.539993  138.460007  139.440002  138.899994   16651500.0   
 2019-07-16  139.050003  136.520004  138.960007  137.080002   22726100.0   
 2019-07-17  137.929993  136.220001  137.699997  136.270004   20211000.0   
 2019-07-18  136.619995  134.669998  135.550003  136.419998   30808700.0   
 2019-07-19  140.669998  136.449997  140.220001  136.619995   48992400.0   
 2019-07-22  139.190002  137.330002  137.410004  138.429993   25074900.0   
 2019-07-23  139.990005  138.029999  139.759995  139.289993   18034600.0   
 2019-07-24  140.740005  138.850006  138.899994  140.720001   20738300.0   
 2019-07-25  140.610001  139.320007  140.429993  140.190002   18356900.0   
 2019-07-26  141.679993  140.300003  140.369995  141.339996   19037600.0   
 2019-07-29  141.509995  139.369995  141.500000  141.029999   16605900.0   
 2019-07-30  141.220001  139.800003  140.139999  140.350006   16846500.0   
 2019-07-31  140.490005  135.080002  140.330002  136.270004   38598800.0   
 2019-08-01  140.940002  136.929993  137.000000  138.059998   40557500.0   
 2019-08-02  138.320007  135.259995  138.089996  136.899994   30791600.0   
 2019-08-05  133.929993  130.779999  133.300003  132.210007   42749600.0   
 2019-08-06  135.679993  133.210007  133.800003  134.690002   32696700.0   
 
              Adj Close  
 Date                    
 2010-01-04   24.525019  
 2010-01-05   24.532942  
 2010-01-06   24.382378  
 2010-01-07   24.128809  
 2010-01-08   24.295214  
 2010-01-11   23.986179  
 2010-01-12   23.827694  
 2010-01-13   24.049570  
 2010-01-14   24.532942  
 2010-01-15   24.453693  
 2010-01-19   24.643881  
 2010-01-20   24.239746  
 2010-01-21   23.780155  
 2010-01-22   22.948128  
 2010-01-25   23.233395  
 2010-01-26   23.376024  
 2010-01-27   23.510740  
 2010-01-28   23.106604  
 2010-01-29   22.330048  
 2010-02-01   22.512297  
 2010-02-02   22.551926  
 2010-02-03   22.686628  
 2010-02-04   22.060629  
 2010-02-05   22.203266  
 2010-02-08   21.965540  
 2010-02-09   22.195339  
 2010-02-10   22.179491  
 2010-02-11   22.282507  
 2010-02-12   22.131947  
 2010-02-16   22.569809  
 ...                ...  
 2019-06-25  133.429993  
 2019-06-26  133.929993  
 2019-06-27  134.149994  
 2019-06-28  133.960007  
 2019-07-01  135.679993  
 2019-07-02  136.580002  
 2019-07-03  137.460007  
 2019-07-05  137.059998  
 2019-07-08  136.960007  
 2019-07-09  136.460007  
 2019-07-10  137.850006  
 2019-07-11  138.399994  
 2019-07-12  138.899994  
 2019-07-15  138.899994  
 2019-07-16  137.080002  
 2019-07-17  136.270004  
 2019-07-18  136.419998  
 2019-07-19  136.619995  
 2019-07-22  138.429993  
 2019-07-23  139.289993  
 2019-07-24  140.720001  
 2019-07-25  140.190002  
 2019-07-26  141.339996  
 2019-07-29  141.029999  
 2019-07-30  140.350006  
 2019-07-31  136.270004  
 2019-08-01  138.059998  
 2019-08-02  136.899994  
 2019-08-05  132.210007  
 2019-08-06  134.690002  
 
 [2414 rows x 6 columns],
 'GOOG':                    High          Low         Open        Close      Volume  \
 Date                                                                         
 2010-01-04   313.579620   310.954468   312.304413   312.204773   3927000.0   
 2010-01-05   312.747742   309.609497   312.418976   310.829926   6031900.0   
 2010-01-06   311.761444   302.047852   311.761444   302.994293   7987100.0   
 2010-01-07   303.861053   295.218445   303.562164   295.940735  12876600.0   
 2010-01-08   300.498657   293.455048   294.894653   299.885956   9483900.0   
 2010-01-11   301.101410   295.910858   301.101410   299.432648  14479800.0   
 2010-01-12   297.963165   292.902130   297.709106   294.137512   9742900.0   
 2010-01-13   293.091431   285.878448   287.168610   292.448822  13041800.0   
 2010-01-14   295.990540   290.316833   290.859772   293.823669   8511900.0   
 2010-01-15   295.671753   287.940735   295.562164   288.917053  10909600.0   
 2010-01-19   294.107605   287.069000   289.514832   292.712830   8665700.0   
 2010-01-20   291.895905   286.570862   291.895905   289.121307   6525700.0   
 2010-01-21   292.314331   285.056549   290.630646   290.401489  12662600.0   
 2010-01-22   284.234619   266.431335   281.196014   273.978058  13651700.0   
 2010-01-25   273.913300   266.755127   272.274445   268.991760   8872800.0   
 2010-01-26   273.773834   267.143677   267.980530   270.197235   8743600.0   
 2010-01-27   272.802460   266.655518   269.624390   270.037842   7958400.0   
 2010-01-28   272.478668   264.309296   271.228363   266.147400   6482300.0   
 2010-01-29   269.484894   261.823608   268.239563   263.980530   8311900.0   
 2010-02-01   266.904572   264.159851   266.301849   265.514771   4518400.0   
 2010-02-02   266.481171   262.819885   266.481171   264.568329   8223000.0   
 2010-02-03   270.037842   263.128723   263.347900   269.400208   6020500.0   
 2010-02-04   267.995483   261.798706   267.497345   262.406433   6780600.0   
 2010-02-05   265.753876   260.254517   263.213409   264.653015   6335600.0   
 2010-02-08   269.988007   264.772552   265.255768   265.738953   5408700.0   
 2010-02-09   269.753906   266.535950   268.762604   267.218414   5660200.0   
 2010-02-10   267.890869   262.859741   266.037811   266.227112   5369000.0   
 2010-02-11   269.235840   263.761353   265.664215   267.198486   4838000.0   
 2010-02-12   267.572083   264.259491   265.489868   265.564606   4576400.0   
 2010-02-16   271.049042   266.152405   267.432587   269.639313   7336100.0   
 ...                 ...          ...          ...          ...         ...   
 2019-06-25  1114.349976  1083.800049  1112.660034  1086.349976   1546900.0   
 2019-06-26  1092.969971  1072.239990  1086.500000  1079.800049   1810900.0   
 2019-06-27  1087.099976  1075.290039  1084.000000  1076.010010   1004300.0   
 2019-06-28  1081.000000  1073.369995  1076.390015  1080.910034   1693200.0   
 2019-07-01  1107.579956  1093.703003  1098.000000  1097.949951   1436300.0   
 2019-07-02  1111.770020  1098.170044  1102.239990  1111.250000    991600.0   
 2019-07-03  1126.760010  1113.859985  1117.410034  1121.579956    767000.0   
 2019-07-05  1132.880005  1116.140015  1117.800049  1131.589966   1264300.0   
 2019-07-08  1125.979980  1111.209961  1125.170044  1116.349976   1236400.0   
 2019-07-09  1128.025024  1107.170044  1111.800049  1124.829956   1330400.0   
 2019-07-10  1142.050049  1130.969971  1131.219971  1140.479980   1209500.0   
 2019-07-11  1153.069946  1139.579956  1143.250000  1144.209961   1195500.0   
 2019-07-12  1147.339966  1138.780029  1143.989990  1144.900024    864000.0   
 2019-07-15  1150.819946  1139.400024  1146.859985  1150.339966    903800.0   
 2019-07-16  1158.579956  1145.000000  1146.000000  1153.579956   1238800.0   
 2019-07-17  1158.359985  1145.770020  1150.969971  1146.349976   1170000.0   
 2019-07-18  1147.604980  1132.729980  1141.739990  1146.329956   1291300.0   
 2019-07-19  1151.140015  1129.619995  1148.189941  1130.099976   1647200.0   
 2019-07-22  1139.250000  1124.239990  1133.449951  1138.069946   1301500.0   
 2019-07-23  1146.900024  1131.800049  1144.000000  1146.209961   1093700.0   
 2019-07-24  1144.000000  1126.989990  1131.900024  1137.810059   1589800.0   
 2019-07-25  1141.699951  1120.920044  1137.819946  1132.119995   2209800.0   
 2019-07-26  1265.550049  1224.000000  1224.040039  1250.410034   4805800.0   
 2019-07-29  1247.369995  1228.229980  1241.050049  1239.410034   2223700.0   
 2019-07-30  1234.869995  1223.300049  1225.410034  1225.140015   1453300.0   
 2019-07-31  1234.000000  1207.764038  1223.000000  1216.680054   1725500.0   
 2019-08-01  1234.109985  1205.719971  1214.030029  1209.010010   1698500.0   
 2019-08-02  1206.900024  1188.939941  1200.739990  1193.989990   1645100.0   
 2019-08-05  1175.239990  1140.140015  1170.040039  1152.319946   2597500.0   
 2019-08-06  1179.959961  1160.000000  1163.310059  1169.949951   1709400.0   
 
               Adj Close  
 Date                     
 2010-01-04   312.204773  
 2010-01-05   310.829926  
 2010-01-06   302.994293  
 2010-01-07   295.940735  
 2010-01-08   299.885956  
 2010-01-11   299.432648  
 2010-01-12   294.137512  
 2010-01-13   292.448822  
 2010-01-14   293.823669  
 2010-01-15   288.917053  
 2010-01-19   292.712830  
 2010-01-20   289.121307  
 2010-01-21   290.401489  
 2010-01-22   273.978058  
 2010-01-25   268.991760  
 2010-01-26   270.197235  
 2010-01-27   270.037842  
 2010-01-28   266.147400  
 2010-01-29   263.980530  
 2010-02-01   265.514771  
 2010-02-02   264.568329  
 2010-02-03   269.400208  
 2010-02-04   262.406433  
 2010-02-05   264.653015  
 2010-02-08   265.738953  
 2010-02-09   267.218414  
 2010-02-10   266.227112  
 2010-02-11   267.198486  
 2010-02-12   265.564606  
 2010-02-16   269.639313  
 ...                 ...  
 2019-06-25  1086.349976  
 2019-06-26  1079.800049  
 2019-06-27  1076.010010  
 2019-06-28  1080.910034  
 2019-07-01  1097.949951  
 2019-07-02  1111.250000  
 2019-07-03  1121.579956  
 2019-07-05  1131.589966  
 2019-07-08  1116.349976  
 2019-07-09  1124.829956  
 2019-07-10  1140.479980  
 2019-07-11  1144.209961  
 2019-07-12  1144.900024  
 2019-07-15  1150.339966  
 2019-07-16  1153.579956  
 2019-07-17  1146.349976  
 2019-07-18  1146.329956  
 2019-07-19  1130.099976  
 2019-07-22  1138.069946  
 2019-07-23  1146.209961  
 2019-07-24  1137.810059  
 2019-07-25  1132.119995  
 2019-07-26  1250.410034  
 2019-07-29  1239.410034  
 2019-07-30  1225.140015  
 2019-07-31  1216.680054  
 2019-08-01  1209.010010  
 2019-08-02  1193.989990  
 2019-08-05  1152.319946  
 2019-08-06  1169.949951  
 
 [2414 rows x 6 columns]}
len(all_data)
4
google = all_data["GOOG"]
google
High	Low	Open	Close	Volume	Adj Close
Date						
2010-01-04	313.579620	310.954468	312.304413	312.204773	3927000.0	312.204773
2010-01-05	312.747742	309.609497	312.418976	310.829926	6031900.0	310.829926
2010-01-06	311.761444	302.047852	311.761444	302.994293	7987100.0	302.994293
2010-01-07	303.861053	295.218445	303.562164	295.940735	12876600.0	295.940735
2010-01-08	300.498657	293.455048	294.894653	299.885956	9483900.0	299.885956
2010-01-11	301.101410	295.910858	301.101410	299.432648	14479800.0	299.432648
2010-01-12	297.963165	292.902130	297.709106	294.137512	9742900.0	294.137512
2010-01-13	293.091431	285.878448	287.168610	292.448822	13041800.0	292.448822
2010-01-14	295.990540	290.316833	290.859772	293.823669	8511900.0	293.823669
2010-01-15	295.671753	287.940735	295.562164	288.917053	10909600.0	288.917053
2010-01-19	294.107605	287.069000	289.514832	292.712830	8665700.0	292.712830
2010-01-20	291.895905	286.570862	291.895905	289.121307	6525700.0	289.121307
2010-01-21	292.314331	285.056549	290.630646	290.401489	12662600.0	290.401489
2010-01-22	284.234619	266.431335	281.196014	273.978058	13651700.0	273.978058
2010-01-25	273.913300	266.755127	272.274445	268.991760	8872800.0	268.991760
2010-01-26	273.773834	267.143677	267.980530	270.197235	8743600.0	270.197235
2010-01-27	272.802460	266.655518	269.624390	270.037842	7958400.0	270.037842
2010-01-28	272.478668	264.309296	271.228363	266.147400	6482300.0	266.147400
2010-01-29	269.484894	261.823608	268.239563	263.980530	8311900.0	263.980530
2010-02-01	266.904572	264.159851	266.301849	265.514771	4518400.0	265.514771
2010-02-02	266.481171	262.819885	266.481171	264.568329	8223000.0	264.568329
2010-02-03	270.037842	263.128723	263.347900	269.400208	6020500.0	269.400208
2010-02-04	267.995483	261.798706	267.497345	262.406433	6780600.0	262.406433
2010-02-05	265.753876	260.254517	263.213409	264.653015	6335600.0	264.653015
2010-02-08	269.988007	264.772552	265.255768	265.738953	5408700.0	265.738953
2010-02-09	269.753906	266.535950	268.762604	267.218414	5660200.0	267.218414
2010-02-10	267.890869	262.859741	266.037811	266.227112	5369000.0	266.227112
2010-02-11	269.235840	263.761353	265.664215	267.198486	4838000.0	267.198486
2010-02-12	267.572083	264.259491	265.489868	265.564606	4576400.0	265.564606
2010-02-16	271.049042	266.152405	267.432587	269.639313	7336100.0	269.639313
...	...	...	...	...	...	...
2019-06-25	1114.349976	1083.800049	1112.660034	1086.349976	1546900.0	1086.349976
2019-06-26	1092.969971	1072.239990	1086.500000	1079.800049	1810900.0	1079.800049
2019-06-27	1087.099976	1075.290039	1084.000000	1076.010010	1004300.0	1076.010010
2019-06-28	1081.000000	1073.369995	1076.390015	1080.910034	1693200.0	1080.910034
2019-07-01	1107.579956	1093.703003	1098.000000	1097.949951	1436300.0	1097.949951
2019-07-02	1111.770020	1098.170044	1102.239990	1111.250000	991600.0	1111.250000
2019-07-03	1126.760010	1113.859985	1117.410034	1121.579956	767000.0	1121.579956
2019-07-05	1132.880005	1116.140015	1117.800049	1131.589966	1264300.0	1131.589966
2019-07-08	1125.979980	1111.209961	1125.170044	1116.349976	1236400.0	1116.349976
2019-07-09	1128.025024	1107.170044	1111.800049	1124.829956	1330400.0	1124.829956
2019-07-10	1142.050049	1130.969971	1131.219971	1140.479980	1209500.0	1140.479980
2019-07-11	1153.069946	1139.579956	1143.250000	1144.209961	1195500.0	1144.209961
2019-07-12	1147.339966	1138.780029	1143.989990	1144.900024	864000.0	1144.900024
2019-07-15	1150.819946	1139.400024	1146.859985	1150.339966	903800.0	1150.339966
2019-07-16	1158.579956	1145.000000	1146.000000	1153.579956	1238800.0	1153.579956
2019-07-17	1158.359985	1145.770020	1150.969971	1146.349976	1170000.0	1146.349976
2019-07-18	1147.604980	1132.729980	1141.739990	1146.329956	1291300.0	1146.329956
2019-07-19	1151.140015	1129.619995	1148.189941	1130.099976	1647200.0	1130.099976
2019-07-22	1139.250000	1124.239990	1133.449951	1138.069946	1301500.0	1138.069946
2019-07-23	1146.900024	1131.800049	1144.000000	1146.209961	1093700.0	1146.209961
2019-07-24	1144.000000	1126.989990	1131.900024	1137.810059	1589800.0	1137.810059
2019-07-25	1141.699951	1120.920044	1137.819946	1132.119995	2209800.0	1132.119995
2019-07-26	1265.550049	1224.000000	1224.040039	1250.410034	4805800.0	1250.410034
2019-07-29	1247.369995	1228.229980	1241.050049	1239.410034	2223700.0	1239.410034
2019-07-30	1234.869995	1223.300049	1225.410034	1225.140015	1453300.0	1225.140015
2019-07-31	1234.000000	1207.764038	1223.000000	1216.680054	1725500.0	1216.680054
2019-08-01	1234.109985	1205.719971	1214.030029	1209.010010	1698500.0	1209.010010
2019-08-02	1206.900024	1188.939941	1200.739990	1193.989990	1645100.0	1193.989990
2019-08-05	1175.239990	1140.140015	1170.040039	1152.319946	2597500.0	1152.319946
2019-08-06	1179.959961	1160.000000	1163.310059	1169.949951	1709400.0	1169.949951
2414 rows × 6 columns

volume
AAPL	IBM	MSFT	GOOG
Date				
2010-01-04	123432400.0	6155300.0	38409100.0	3927000.0
2010-01-05	150476200.0	6841400.0	49749600.0	6031900.0
2010-01-06	138040000.0	5605300.0	58182400.0	7987100.0
2010-01-07	119282800.0	5840600.0	50559700.0	12876600.0
2010-01-08	111902700.0	4197200.0	51197400.0	9483900.0
2010-01-11	115557400.0	5730400.0	68754700.0	14479800.0
2010-01-12	148614900.0	8081500.0	65912100.0	9742900.0
2010-01-13	151473000.0	6455400.0	51863500.0	13041800.0
2010-01-14	108223500.0	7111800.0	63228100.0	8511900.0
2010-01-15	148516900.0	8494400.0	79913200.0	10909600.0
2010-01-19	182501900.0	13916200.0	46575700.0	8665700.0
2010-01-20	153038200.0	15197500.0	54849500.0	6525700.0
2010-01-21	152038600.0	9608600.0	73086700.0	12662600.0
2010-01-22	220441900.0	10088600.0	102004600.0	13651700.0
2010-01-25	266424900.0	5738500.0	63373000.0	8872800.0
2010-01-26	466777500.0	7135300.0	66639900.0	8743600.0
2010-01-27	430642100.0	8719200.0	63949500.0	7958400.0
2010-01-28	293375600.0	9622200.0	117513700.0	6482300.0
2010-01-29	311488100.0	11571200.0	193888500.0	8311900.0
2010-02-01	187469100.0	7242900.0	85931100.0	4518400.0
2010-02-02	174585600.0	5899900.0	54413700.0	8223000.0
2010-02-03	153832000.0	4177100.0	61397900.0	6020500.0
2010-02-04	189413000.0	9126900.0	77850000.0	6780600.0
2010-02-05	212576700.0	8617000.0	80960100.0	6335600.0
2010-02-08	119567700.0	5718500.0	52820600.0	5408700.0
2010-02-09	158221700.0	6044500.0	59195800.0	5660200.0
2010-02-10	92590400.0	5219100.0	48591300.0	5369000.0
2010-02-11	137586400.0	5089000.0	65993700.0	4838000.0
2010-02-12	163867200.0	8017700.0	81117200.0	4576400.0
2010-02-16	135934400.0	6777300.0	51935600.0	7336100.0
...	...	...	...	...
2019-06-25	21070300.0	2801200.0	33327400.0	1546900.0
2019-06-26	26067500.0	2284600.0	23657700.0	1810900.0
2019-06-27	20899700.0	2149800.0	16557500.0	1004300.0
2019-06-28	31110600.0	6153900.0	30043000.0	1693200.0
2019-07-01	27316700.0	3377700.0	22654200.0	1436300.0
2019-07-02	16935200.0	2409700.0	15237800.0	991600.0
2019-07-03	11362000.0	1930400.0	13629300.0	767000.0
2019-07-05	17265500.0	2134700.0	18141100.0	1264300.0
2019-07-08	25338600.0	2395300.0	16779700.0	1236400.0
2019-07-09	20578000.0	3365200.0	19953100.0	1330400.0
2019-07-10	17897100.0	2513900.0	24204400.0	1209500.0
2019-07-11	20191800.0	2132900.0	22327900.0	1195500.0
2019-07-12	17595200.0	2786200.0	18936800.0	864000.0
2019-07-15	16947400.0	2368300.0	16651500.0	903800.0
2019-07-16	16866800.0	3474700.0	22726100.0	1238800.0
2019-07-17	14107500.0	6064300.0	20211000.0	1170000.0
2019-07-18	18582200.0	12695400.0	30808700.0	1291300.0
2019-07-19	20929300.0	7290700.0	48992400.0	1647200.0
2019-07-22	22277900.0	4092600.0	25074900.0	1301500.0
2019-07-23	18355200.0	3742200.0	18034600.0	1093700.0
2019-07-24	14991600.0	2952400.0	20738300.0	1589800.0
2019-07-25	13909600.0	3102100.0	18356900.0	2209800.0
2019-07-26	17618900.0	2904300.0	19037600.0	4805800.0
2019-07-29	21673400.0	2075500.0	16605900.0	2223700.0
2019-07-30	33935700.0	2632700.0	16846500.0	1453300.0
2019-07-31	69281400.0	3722900.0	38598800.0	1725500.0
2019-08-01	54017900.0	6344000.0	40557500.0	1698500.0
2019-08-02	40862100.0	8101700.0	30791600.0	1645100.0
2019-08-05	52393000.0	7114900.0	42749600.0	2597500.0
2019-08-06	35824800.0	5070700.0	32696700.0	1709400.0
2414 rows × 4 columns

returns = price.pct_change()
returns.tail()
AAPL	IBM	MSFT	GOOG
Date				
2019-07-31	0.020404	-0.010216	-0.029070	-0.006905
2019-08-01	-0.021639	0.014031	0.013136	-0.006304
2019-08-02	-0.021158	-0.020423	-0.008402	-0.012423
2019-08-05	-0.052348	-0.044075	-0.034258	-0.034900
2019-08-06	0.018930	-0.000213	0.018758	0.015300
returns["MSFT"].corr(returns["IBM"])
0.48776915306289437
returns["MSFT"].cov(returns["IBM"])
8.68675975730405e-05
returns.corr()
AAPL	IBM	MSFT	GOOG
AAPL	1.000000	0.381187	0.452929	0.458950
IBM	0.381187	1.000000	0.487769	0.401542
MSFT	0.452929	0.487769	1.000000	0.534962
GOOG	0.458950	0.401542	0.534962	1.000000
returns.cov()
AAPL	IBM	MSFT	GOOG
AAPL	0.000266	0.000077	0.000107	0.000116
IBM	0.000077	0.000152	0.000087	0.000077
MSFT	0.000107	0.000087	0.000208	0.000120
GOOG	0.000116	0.000077	0.000120	0.000242
returns.corrwith(returns.IBM)
AAPL    0.381187
IBM     1.000000
MSFT    0.487769
GOOG    0.401542
dtype: float64
returns.corrwith(volume)
AAPL   -0.061962
IBM    -0.152217
MSFT   -0.090159
GOOG   -0.018746
dtype: float64
returns.tail()
AAPL	IBM	MSFT	GOOG
Date				
2019-07-31	0.020404	-0.010216	-0.029070	-0.006905
2019-08-01	-0.021639	0.014031	0.013136	-0.006304
2019-08-02	-0.021158	-0.020423	-0.008402	-0.012423
2019-08-05	-0.052348	-0.044075	-0.034258	-0.034900
2019-08-06	0.018930	-0.000213	0.018758	0.015300
all_data["IBM"]
High	Low	Open	Close	Volume	Adj Close
Date						
2010-01-04	132.970001	130.850006	131.179993	132.449997	6155300.0	98.142967
2010-01-05	131.850006	130.100006	131.679993	130.850006	6841400.0	96.957375
2010-01-06	131.490005	129.809998	130.679993	130.000000	5605300.0	96.327530
2010-01-07	130.250000	128.910004	129.869995	129.550003	5840600.0	95.994110
2010-01-08	130.919998	129.050003	129.070007	130.850006	4197200.0	96.957375
2010-01-11	131.059998	128.669998	131.059998	129.479996	5730400.0	95.942223
2010-01-12	131.330002	129.000000	129.029999	130.509995	8081500.0	96.705429
2010-01-13	131.119995	129.160004	130.389999	130.229996	6455400.0	96.497971
2010-01-14	132.710007	129.910004	130.550003	132.309998	7111800.0	98.039223
2010-01-15	132.889999	131.089996	132.029999	131.779999	8494400.0	97.646492
2010-01-19	134.250000	131.559998	131.630005	134.139999	13916200.0	99.395187
2010-01-20	131.149994	128.949997	130.460007	130.250000	15197500.0	96.512794
2010-01-21	130.690002	128.059998	130.470001	129.000000	9608600.0	95.586586
2010-01-22	128.889999	125.370003	128.669998	125.500000	10088600.0	92.993134
2010-01-25	126.889999	125.709999	126.330002	126.120003	5738500.0	93.452568
2010-01-26	127.750000	125.410004	125.919998	125.750000	7135300.0	93.178391
2010-01-27	126.959999	125.040001	125.820000	126.330002	8719200.0	93.608154
2010-01-28	127.040001	123.050003	127.029999	123.750000	9622200.0	91.696426
2010-01-29	125.000000	121.900002	124.320000	122.389999	11571200.0	90.688683
2010-02-01	124.949997	122.779999	123.230003	124.669998	7242900.0	92.378105
2010-02-02	125.809998	123.949997	124.790001	125.529999	5899900.0	93.015366
2010-02-03	126.070000	125.070000	125.160004	125.660004	4177100.0	93.111717
2010-02-04	125.440002	122.900002	125.190002	123.000000	9126900.0	91.140678
2010-02-05	123.720001	121.830002	123.040001	123.519997	8617000.0	91.525970
2010-02-08	123.220001	121.739998	123.150002	121.879997	5718500.0	90.714714
2010-02-09	124.199997	122.459999	122.650002	123.209999	6044500.0	91.704597
2010-02-10	123.650002	122.209999	122.940002	122.809998	5219100.0	91.406891
2010-02-11	124.199997	122.059998	122.580002	123.730003	5089000.0	92.091652
2010-02-12	124.050003	121.610001	123.010002	124.000000	8017700.0	92.292587
2010-02-16	125.230003	124.110001	124.910004	125.230003	6777300.0	93.208115
...	...	...	...	...	...	...
2019-06-25	139.550003	138.130005	139.460007	138.360001	2801200.0	136.748734
2019-06-26	139.679993	138.410004	138.869995	138.520004	2284600.0	136.906876
2019-06-27	139.300003	137.949997	138.720001	138.520004	2149800.0	136.906876
2019-06-28	139.139999	137.839996	138.570007	137.899994	6153900.0	136.294083
2019-07-01	141.490005	139.279999	139.600006	139.880005	3377700.0	138.251038
2019-07-02	140.429993	139.470001	139.750000	140.220001	2409700.0	138.587082
2019-07-03	141.820007	140.429993	140.720001	141.539993	1930400.0	139.891693
2019-07-05	141.490005	139.910004	140.869995	141.380005	2134700.0	139.733566
2019-07-08	141.289993	140.270004	141.050003	140.570007	2395300.0	138.933014
2019-07-09	140.990005	139.130005	140.610001	139.330002	3365200.0	137.707443
2019-07-10	141.910004	139.789993	140.000000	140.470001	2513900.0	138.834167
2019-07-11	141.580002	140.300003	140.789993	141.240005	2132900.0	139.595200
2019-07-12	142.919998	141.660004	141.919998	142.740005	2786200.0	141.077728
2019-07-15	143.509995	142.119995	142.889999	143.320007	2368300.0	141.650986
2019-07-16	144.039993	143.020004	143.169998	143.529999	3474700.0	141.858536
2019-07-17	143.800003	141.949997	143.610001	143.070007	6064300.0	141.403900
2019-07-18	150.309998	142.199997	142.500000	149.630005	12695400.0	147.887497
2019-07-19	151.580002	149.550003	149.960007	149.679993	7290700.0	147.936905
2019-07-22	151.940002	149.699997	150.160004	149.740005	4092600.0	147.996216
2019-07-23	150.720001	148.380005	150.570007	150.380005	3742200.0	148.628769
2019-07-24	151.449997	149.199997	150.119995	150.029999	2952400.0	148.282837
2019-07-25	150.619995	148.610001	149.820007	150.389999	3102100.0	148.638641
2019-07-26	151.410004	150.100006	151.000000	151.360001	2904300.0	149.597351
2019-07-29	151.479996	150.320007	151.110001	150.880005	2075500.0	149.122940
2019-07-30	150.399994	149.220001	150.000000	149.770004	2632700.0	148.025864
2019-07-31	150.179993	146.389999	149.699997	148.240005	3722900.0	146.513687
2019-08-01	152.820007	148.500000	148.899994	150.320007	6344000.0	148.569458
2019-08-02	152.949997	145.589996	149.029999	147.250000	8101700.0	145.535202
2019-08-05	145.100006	139.149994	144.979996	140.759995	7114900.0	139.120789
2019-08-06	142.470001	139.309998	142.029999	140.729996	5070700.0	139.091141
2414 rows × 6 columns

returns.corrwith(price)
AAPL    0.001184
IBM     0.033588
MSFT    0.036810
GOOG    0.018308
dtype: float64
obj = pd.Series(["c", "a", "d", "a", "a", "b", "b", "c", "c"])
obj
0    c
1    a
2    d
3    a
4    a
5    b
6    b
7    c
8    c
dtype: object
new = obj.unique()
new
array(['c', 'a', 'd', 'b'], dtype=object)
new.sort()
new
array(['a', 'b', 'c', 'd'], dtype=object)
serial = pd.Series(["v", "v", "a", "w", "w", "g", "g", "a", "e", "e"])
serial
0    v
1    v
2    a
3    w
4    w
5    g
6    g
7    a
8    e
9    e
dtype: object
uniques = serial.unique()
uniques
array(['v', 'a', 'w', 'g', 'e'], dtype=object)
uniques.sort()
uniques
array(['a', 'e', 'g', 'v', 'w'], dtype=object)
gravel = serial 
gravel
0    v
1    v
2    a
3    w
4    w
5    g
6    g
7    a
8    e
9    e
dtype: object
real = gravel.unique().sort()
gravel
0    v
1    v
2    a
3    w
4    w
5    g
6    g
7    a
8    e
9    e
dtype: object
real
gravel
0    v
1    v
2    a
3    w
4    w
5    g
6    g
7    a
8    e
9    e
dtype: object
great = gravel.unique()
great
array(['v', 'a', 'w', 'g', 'e'], dtype=object)
great.sort()
great
array(['a', 'e', 'g', 'v', 'w'], dtype=object)
gravel.value_counts()
w    2
v    2
g    2
a    2
e    2
dtype: int64
pd.value_counts(gravel.values)
w    2
v    2
g    2
a    2
e    2
dtype: int64
price
AAPL	IBM	MSFT	GOOG
Date				
2010-01-04	26.782711	98.142967	24.525019	312.204773
2010-01-05	26.829010	96.957375	24.532942	310.829926
2010-01-06	26.402260	96.327530	24.382378	302.994293
2010-01-07	26.353460	95.994110	24.128809	295.940735
2010-01-08	26.528664	96.957375	24.295214	299.885956
2010-01-11	26.294640	95.942223	23.986179	299.432648
2010-01-12	25.995537	96.705429	23.827694	294.137512
2010-01-13	26.362217	96.497971	24.049570	292.448822
2010-01-14	26.209538	98.039223	24.532942	293.823669
2010-01-15	25.771528	97.646492	24.453693	288.917053
2010-01-19	26.911612	99.395187	24.643881	292.712830
2010-01-20	26.497383	96.512794	24.239746	289.121307
2010-01-21	26.039341	95.586586	23.780155	290.401489
2010-01-22	24.747818	92.993134	22.948128	273.978058
2010-01-25	25.413599	93.452568	23.233395	268.991760
2010-01-26	25.772774	93.178391	23.376024	270.197235
2010-01-27	26.015560	93.608154	23.510740	270.037842
2010-01-28	24.940546	91.696426	23.106604	266.147400
2010-01-29	24.035734	90.688683	22.330048	263.980530
2010-02-01	24.369871	92.378105	22.512297	265.514771
2010-02-02	24.511295	93.015366	22.551926	264.568329
2010-02-03	24.933033	93.111717	22.686628	269.400208
2010-02-04	24.034487	91.140678	22.060629	262.406433
2010-02-05	24.461227	91.525970	22.203266	264.653015
2010-02-08	24.293537	90.714714	21.965540	265.738953
2010-02-09	24.552589	91.704597	22.195339	267.218414
2010-02-10	24.418684	91.406891	22.179491	266.227112
2010-02-11	24.862957	92.091652	22.282507	267.198486
2010-02-12	25.076958	92.292587	22.131947	265.564606
2010-02-16	25.454903	93.208115	22.569809	269.639313
...	...	...	...	...
2019-06-25	195.570007	136.748734	133.429993	1086.349976
2019-06-26	199.800003	136.906876	133.929993	1079.800049
2019-06-27	199.740005	136.906876	134.149994	1076.010010
2019-06-28	197.919998	136.294083	133.960007	1080.910034
2019-07-01	201.550003	138.251038	135.679993	1097.949951
2019-07-02	202.729996	138.587082	136.580002	1111.250000
2019-07-03	204.410004	139.891693	137.460007	1121.579956
2019-07-05	204.229996	139.733566	137.059998	1131.589966
2019-07-08	200.020004	138.933014	136.960007	1116.349976
2019-07-09	201.240005	137.707443	136.460007	1124.829956
2019-07-10	203.229996	138.834167	137.850006	1140.479980
2019-07-11	201.750000	139.595200	138.399994	1144.209961
2019-07-12	203.300003	141.077728	138.899994	1144.900024
2019-07-15	205.210007	141.650986	138.899994	1150.339966
2019-07-16	204.500000	141.858536	137.080002	1153.579956
2019-07-17	203.350006	141.403900	136.270004	1146.349976
2019-07-18	205.660004	147.887497	136.419998	1146.329956
2019-07-19	202.589996	147.936905	136.619995	1130.099976
2019-07-22	207.220001	147.996216	138.429993	1138.069946
2019-07-23	208.839996	148.628769	139.289993	1146.209961
2019-07-24	208.669998	148.282837	140.720001	1137.810059
2019-07-25	207.020004	148.638641	140.190002	1132.119995
2019-07-26	207.740005	149.597351	141.339996	1250.410034
2019-07-29	209.679993	149.122940	141.029999	1239.410034
2019-07-30	208.779999	148.025864	140.350006	1225.140015
2019-07-31	213.039993	146.513687	136.270004	1216.680054
2019-08-01	208.429993	148.569458	138.059998	1209.010010
2019-08-02	204.020004	145.535202	136.899994	1193.989990
2019-08-05	193.339996	139.120789	132.210007	1152.319946
2019-08-06	197.000000	139.091141	134.690002	1169.949951
2414 rows × 4 columns

new_price = price["GOOG"]
pd.value_counts(new_price.values)
307.098907     3
288.917053     3
360.274597     2
831.409973     2
553.380676     2
772.150024     2
786.140015     2
242.595688     2
697.770020     2
311.811249     2
312.214752     2
302.252075     2
573.704895     2
1040.609985    2
532.338440     2
786.900024     2
747.770020     2
1205.500000    2
536.690002     2
1018.380005    2
629.250000     2
1095.060059    2
307.069031     2
570.034973     2
1098.260010    2
1124.270020    1
264.653015     1
268.662994     1
262.660492     1
1194.640015    1
              ..
582.889648     1
382.391693     1
375.323212     1
314.008026     1
301.191071     1
307.880981     1
291.318054     1
1029.270020    1
1116.459961    1
534.632141     1
706.630005     1
311.328064     1
843.250000     1
291.462524     1
1171.439941    1
526.690002     1
777.500000     1
1173.369995    1
269.340454     1
642.679993     1
1082.760010    1
283.337982     1
614.659973     1
820.919983     1
593.111633     1
1148.969971    1
646.669983     1
806.070007     1
289.330505     1
628.000000     1
Length: 2387, dtype: int64
mask = gravel.isin(["v", "a"])
mask
0     True
1     True
2     True
3    False
4    False
5    False
6    False
7     True
8    False
9    False
dtype: bool
gravel[mask]
gravel[mask]
0    v
1    v
2    a
7    a
dtype: object
​
